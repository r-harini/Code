colour = "BadRate", size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("BadRate"),values=c("red"))
View(Data)
View(Data)
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005, group = 1),
colour = "Bad.Rate", size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("Bad.Rate"),values=c("red"))
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005,colour = "Bad.Rate", group = 1),
size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("Bad.Rate"),values=c("red"))
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005,colour = "Bad.Rate", group = 1),
size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("Bad.Rate"),values=c("red"))+
theme(legend.position = c(0.95, 0.95))
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005,colour = "Bad.Rate", group = 1),
size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("Bad.Rate"),values=c("red"))+
theme(legend.position = c(0.9, 0.9))
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005,colour = "Bad.Rate", group = 1),
size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("Bad.Rate"),values=c("red"))+
theme(legend.position = c(0.9, 0.95))
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005,colour = "Bad.Rate", group = 1),
size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("Bad.Rate"),values=c("red"))+
theme(legend.position = c(0.85, 0.95))
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005,colour = "Bad.Rate", group = 1),
size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("Bad.Rate"),values=c("red"))+
theme(legend.position = c(0.9, 0.95))
Data=read.csv("C:/Code/DV_Lab/Lab1/Dataset.csv", fileEncoding="UTF-8-BOM")
xi=Data$Age.Group
yi=Data$Number.of.Loans
plot(xi,yi,type='h',color='purple')
zi=Data$Bad.Rate
df=data.frame(xi,yi,zi)
ggplot(data=df, aes(x=xi, y=yi)) + geom_bar(stat="identity", fill="black")+xlab("Age Groups")+ylab("Number Of Loans")
ggplot(data=df) + geom_bar(aes(x=xi, y=yi),stat="identity", fill="black")+geom_line(aes(x=xi, y=zi),stat="identity",group=1)+
scale_y_continuous(sec.axis = sec_axis(~./max(df$yi)))
Data=read.csv("C:/Code/DV_Lab/Lab1/Dataset.csv", fileEncoding="UTF-8-BOM")
xi=Data$Age.Group
yi=Data$Number.of.Loans
plot(xi,yi,type='h',color='purple')
zi=Data$Bad.Rate
df=data.frame(xi,yi,zi)
ggplot(data=df, aes(x=xi, y=yi)) + geom_bar(stat="identity", fill="black")+xlab("Age Groups")+ylab("Number Of Loans")
ggplot(data=df) + geom_bar(aes(x=xi, y=yi),stat="identity", fill="black")+geom_line(aes(x=xi, y=zi),stat="identity",group=1)+
scale_y_continuous(sec.axis = sec_axis(~./max(df$yi)))
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005,colour = "Bad.Rate", group = 1),
size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")
ggplot(df) +
geom_col(aes(x = xi, y = yi)) +
geom_line(aes(x = xi, y = zi/0.0005,colour = "Bad.Rate", group = 1),
size = 1) +
scale_y_continuous(sec.axis = sec_axis(~.*0.0005, name = "BadRate")) +
labs(y = "No. 0f Loans", x = "Age")+
scale_colour_manual("", breaks=c("Bad.Rate"),values=c("red"))+
theme(legend.position = c(0.9, 0.95))
install.packages("corrplot")
library(corrplot)
dataset=quakes
cm=cor(dataset)
corrplot(cm, method="circle")
corrplot(cm, method="pie")
corrplot(cm, method="square")
corrplot(cm, method="number")
corrplot(cm, method="color")
corrplot(cm, method="ellipse")
corrplot(cm, method="shade")
corrplot(cm, type="upper")
corrplot(cm, type="lower")
corrplot.mixed(cm)
corrplot.mixed(cm, lower.col = "black", number.cex = .7)
corrplot.mixed(cm, lower = "ellipse", upper = "circle")
corrplot.mixed(cm, lower = "square", upper = "circle", tl.col = "black")
corrplot(cm, order = "hclust", addrect = 2)
corrplot(cm, type = "upper", order = "hclust",col = c("black", "white"), bg = "lightblue")
chart.correlation(cm)
chart.Correlation(cm)
chart.Correlation(R, histogram = TRUE, method = c("pearson", "kendall",
"spearman"), ...)
library(ggplot2)
library(ggalt)
install.packages("ggalt")
library(ggalt)
View(dataset)
View(dataset)
dataset_select=dataset[dataset$lat<-20 & dataset$long>180 & dataset$depth>200 & dataset$mag<4.5 & dataset$stations<20]
dataset_select=dataset[dataset$lat<(-20) & dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5) & dataset$stations<20]
View(dataset)
View(dataset)
View(dataset_select)
View(dataset_select)
dataset=quakes
dataset_select=dataset[dataset$lat<(-20) & dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5) & dataset$stations<20]
#Plot
ggpplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)+
xlim(c(-30, 30))+
ylim(c(100,200))+
geom_encircle(aes(x=lat, y=long), data=dataset_select, color="red", size=2, expand=0.08)+
labs(subtitle="Latitude vs Longitude",
y="Longitude", x="Latitude", title="Scatterplot+ Encircle", caption="Source: midwest")
#Plot
ggplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)+
xlim(c(-30, 30))+
ylim(c(100,200))+
geom_encircle(aes(x=lat, y=long), data=dataset_select, color="red", size=2, expand=0.08)+
labs(subtitle="Latitude vs Longitude",
y="Longitude", x="Latitude", title="Scatterplot+ Encircle", caption="Source: midwest")
midwest <- read.csv("http://goo.gl/G1K41K")
View(midwest)
View(midwest)
dataset_select=dataset[dataset$lat<(-20) & dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5) & dataset$stations<20]
#Plot
ggplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)+
xlim(c(-30, 30))+
ylim(c(100,200))+
geom_encircle(aes(x=lat, y=long), data=dataset_select, color="red", size=2, expand=0.08)+
labs(subtitle="Latitude vs Longitude",
y="Longitude", x="Latitude", title="Scatterplot+ Encircle", caption="Source: midwest")
#Plot
ggplot(dataset, aes(x=lat, y=long))
#Plot
ggplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)
#Plot
ggplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)+
xlim(c(-30, 30))+
ylim(c(100,200))
#Plot
ggplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)+
xlim(c(-30, 30))+
ylim(c(100,200))+
geom_encircle(aes(x=lat, y=long), data=dataset_select, color="red", size=2, expand=0.08)
#Plot
ggplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)+
xlim(c(-30, 30))+
ylim(c(100,200))+
geom_encircle(data=dataset_select,aes(x=lat, y=long), color="red", size=2, expand=0.08)+
labs(subtitle="Latitude vs Longitude",
y="Longitude", x="Latitude", title="Scatterplot+ Encircle", caption="Source: midwest")
View(dataset)
View(dataset)
View(dataset_select)
View(dataset_select)
View(dataset_select)
View(dataset_select)
dataset_select=dataset[dataset$lat<(-20)]
View(dataset)
dataset_select=dataset[ dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5) & dataset$stations<20]
dataset=quakes
dataset_select=dataset[ dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5) & dataset$stations<20]
dataset_select=dataset[ dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5)]
dataset_select=dataset[dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5)]
dataset_select=dataset[dataset$long > 180]
dataset_select=dataset[dataset$long > 180,]
dataset_select=dataset[dataset$lat<(-20) & dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5) & dataset$stations<20, ]
View(dataset_select)
View(dataset_select)
dataset_select=dataset[dataset$lat<(-20) & dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5) & dataset$stations<20, ]
#Plot
ggplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)+
xlim(c(-30, 30))+
ylim(c(100,200))+
geom_encircle(aes(x=lat, y=long), data=dataset_select, color="red", size=2, expand=0.08)+
labs(subtitle="Latitude vs Longitude",
y="Longitude", x="Latitude", title="Scatterplot+ Encircle", caption="Source: midwest")
dataset_select=dataset[dataset$lat<(-20) & dataset$long>180 & dataset$depth>200 & dataset$mag<(4.5) & dataset$stations<20, ]
#ScatterPlot with encircling
ggplot(dataset, aes(x=lat, y=long))+
geom_point(aes(col=depth, size=mag))+geom_smooth(method="loess", se=F)+
xlim(c(-30, 30))+
ylim(c(100,200))+
geom_encircle(aes(x=lat, y=long), data=dataset_select, color="red", size=2, expand=0.08)+
labs(subtitle="Latitude vs Longitude",
y="Longitude", x="Latitude", title="Scatterplot+ Encircle", caption="Source: Quakes")
#Jitter Plot
g=ggplot(dataset, aes(lat, long))
g+geom_point()+geom_smooth(method="lm", se=F)+labs(subtitle = "Latitude vs Longitude", y="Latitude", x="Longitude", title="Jitter Plot", caption="Source:Quakes")
theme_set(theme_bw())
g+geom_jitter(width=.5, size=1)+labs(subtitle = "Quakes: Latitude vs Longitude", y="Longitude", x="Latitude", title="Jittered Points")
#Counts Chart
g+geom_count(col="red", show.legend = F)+labs(subtitle = "Latitude vs Longitude", y="Latitude", x="Longitude", title="Counts Plot")
#Counts Chart
g+geom_count(col="red", show.legend = F)+labs(subtitle = "Latitude vs Longitude", y="Latitude", x="Longitude", title="Counts Plot")
theme_set(theme_bw())
#Counts Chart
g+geom_count(col="red", show.legend = F)+labs(subtitle = "Latitude vs Longitude", y="Latitude", x="Longitude", title="Counts Plot")
gg=gplot(dataset_select, aes(lat, long))+ labs(subtitle="Quakes: Latitude vs Longitude", title="Bubble Plot")
gg=ggplot(dataset_select, aes(lat, long))+ labs(subtitle="Quakes: Latitude vs Longitude", title="Bubble Plot")
g+geom_jitter(aes(col=depth, size=mag))+geom_smooth(aes(col=depth), method="lm", se=F)
nstall.packages("corrplot")
install.packages("corrplot")
library(corrplot)
dataset=quakes
#Marginal Histogram/Boxplot
library(ggplot2)
#Marginal Histogram/Boxplot
library(ggplot2)
library(ggExtra)
install.packages("ggExtra")
library(ggExtra)
theme_set(theme_bw())
dataset_select=dataset[dataset$lat<(-20) & dataset$long>180,]
g=ggplot(dataset, aes(lat, long))+geom_count()+geom_smooth(method="lm", se=F)
ggMarginal(g, type="histogram", fill="transparent")
ggMarginal(g, type="boxplot", fill="transparent")
#Correlogram
install.packages("ggcorrplot")
library(ggcorrplot)
corr=round(cor(dataset),1)
ggcorrplot(corr, hc.order = TRUE, type="lower",
lab=TRUE, lab_size=3,
method="circle",
colors=c("red", "white", "green"),
title="Correlogram of quakes",
ggtheme=theme_bw())
#Diverging bars
dataset$'name'=rownames(dataset)
dataset$lat_z=round((dataset$lat-mean(dataset$lat))/sd(dataset$lat),2)
dataset$lat_type=ifelse(dataset$lat<(-20), "below", "above")
dataset=dataset[order(dataset$lat_z),]
dataset$name=factor(dataset$name, levels = dataset$name)
ggplot(dataset, aes(x=name, y=lat_z, label=lat_z))+
geom_bar(stat="identity", aes(fill=lat_type), width=.5)+
scale_fill_manual(name="Quakes", labels=c("Above Average", "Below Average"),
values=c("above"="#00ba38", "below"="#f8766d"))+
labs(subtitle="Normalised Latitude from 'quakes'", title="Diverging Bars")+coord_flip()
#Diverging lollipop
ggplot(dataset, aes(x=name, y=lat_z, label=lat_z))+
geom_point(stat="identity", fill="black", size=6)+
geom_segment(aes(y=0, x=name, yend=lat_z, xend=name), color="black")+
geom_text(color="white", size=2)+
labs(title="Diverging Lollipop Chart", subtitle="Normalised Latitudes from Quakes: Lollipop")+
ylim(-2.5,2.5)+coord_flip()
#Diverging Dot plot
ggplot(dataset, aes(x=name, y=lat_z, label=lat_z)) +
geom_point(stat='identity', aes(col=lat_type), size=6)  +
scale_color_manual(name="Latitude",
labels = c("Above Average", "Below Average"),
values = c("above"="#00ba38", "below"="#f8766d")) +
geom_text(color="white", size=2) +
labs(title="Diverging Dot Plot",
subtitle="Normalized Latitude from 'quakes': Dotplot") +
ylim(-2.5, 2.5) +
coord_flip()
#Area Chart
install.packages("quantmod")
library(quantmod)
#Area Chart
install.packages("quantmod")
library(quantmod)
economics$returns_perc <- c(0, diff(economics$psavert)/economics$psavert[-length(economics$psavert)])
# Create break points and labels for axis ticks
brks <- economics$date[seq(1, length(economics$date), 12)]
lbls <- lubridate::year(economics$date[seq(1, length(economics$date), 12)])
# Plot
ggplot(economics[1:100, ], aes(date, returns_perc)) +
geom_area() +
scale_x_date(breaks=brks, labels=lbls) +
theme(axis.text.x = element_text(angle=90)) +
labs(title="Area Chart",
subtitle = "Perc Returns for Personal Savings",
y="% Returns for Personal savings",
caption="Source: economics")
lbls <- lubridate::year(economics$date[seq(1, length(economics$date), 12)])
brks <- economics$date[seq(1, length(economics$date), 12)]
library(quantmod)
install.packages("lubridate")
install.packages("igraph")
library(igraph)
adj=as.matrix(read.csv("Adjacency.csv"))
adj=as.matrix(read.csv("C:\Code\DV_Lab\Lab5\Adjacency.csv"))
adj=as.matrix(read.csv("C:\Code\DV_Lab\Lab5\Adjacency.csv"))
adj=as.matrix(read.csv("Adjacency.csv"))
adj=as.matrix(read.csv("C:/Code/DV_Lab/Lab5/Adjacency.csv"))
edg=as.matrix(read.csv("C:/Code/DV_Lab/Lab5/Edges.csv"))
dat=read.csv(file.choose(),header=TRUE,sep=',', row.names=1,check.names=FALSE)
m=as.matrix(dat)
net=graph.adjacency(m,mode="directed",weighted=TRUE,diag=FALSE)
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
net
dat=read.csv(file.choose(),header=TRUE,sep=',', row.names=1,check.names=FALSE)
dat=read.csv(file.choose(),header=TRUE,sep=',', row.names=1,check.names=FALSE)
dat=read.csv(file.choose(),header=TRUE,sep=',', row.names=1,check.names=FALSE)
dat=read.csv(file.choose(),header=TRUE,sep=',', row.names=1,check.names=FALSE)
m=as.matrix(dat)
net=graph.adjacency(m,mode="directed",weighted=TRUE,diag=FALSE)
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
net
V(net)
E(net)
degree(net, v = V(net), mode = c("all", "out", "in", "total"),
+   loops = TRUE, normalized = FALSE)
degree(net, v = V(net), mode = c("all", "out", "in", "total"),
+   loops = TRUE, normalized = FALSE)
library(igraph)
adj=as.matrix(read.csv("C:/Code/DV_Lab/Lab5/Adjacency.csv"))
edg=as.matrix(read.csv("C:/Code/DV_Lab/Lab5/Edges.csv"))
dat=read.csv(file.choose(),header=TRUE,sep=',', row.names=1,check.names=FALSE)
m=as.matrix(dat)
net=graph.adjacency(m,mode="directed",weighted=TRUE,diag=FALSE)
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
net
V(net)
E(net)
degree(net, v = V(net), mode = c("all", "out", "in", "total"),
+   loops = TRUE, normalized = FALSE)
degree(net, V(net), mode = c("all", "out", "in", "total"),
+   loops = TRUE, normalized = FALSE)
degree(net, v = V(net), c("all", "out", "in", "total"),
+   loops = TRUE, normalized = FALSE)
degree(net, v = V(net), mode = c("all", "out", "in", "total"), +loops = TRUE, normalized = FALSE)
degree(net, v = V(net), mode = c("all", "out", "in", "total"), loops = TRUE, normalized = FALSE)
x-adjacent_vertices(net, V(net), mode=c("out", "in", "all", "total""))
x=adjacent_vertices(net, V(net), mode=c("out", "in", "all", "total""))
x=adjacent_vertices(net, V(net), mode=c("out", "in", "all", "total""))
q
degree(net, v = V(net), mode = c("all", "out", "in", "total"), loops = TRUE, normalized = FALSE)
x=adjacent_vertices(net, V(net), mode=c("out", "in", "all", "total"))
degree(net, v = V(net), mode = c("all", "out", "in", "total"), loops = TRUE, normalized = FALSE)
net=set_vertex_attr(net, "Type", index=V(net), c("leap", "nonleap","nonleap","nonleap",
"leap", "nonleap", "nonleap", "nonleap",
"leap", "nonleap", "nonleap"))
as.directed(net)
nnet=as.directed(net)
plot.igraph(nnet,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
net=graph.adjacency(m,mode="undirected",weighted=TRUE,diag=FALSE)
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
plot.igraph(nnet,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
install.packages("igraph")
library(igraph)
adj=as.matrix(read.csv("C:/Code/DV_Lab/Lab5/Adjacency.csv"))
edg=as.matrix(read.csv("C:/Code/DV_Lab/Lab5/Edges.csv"))
dat=read.csv(file.choose(),header=TRUE,sep=',', row.names=1,check.names=FALSE)
m=as.matrix(dat)
net=graph.adjacency(m,mode="undirected",weighted=TRUE,diag=FALSE)
plot.igraph(net,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
net
V(net)
E(net)
x=adjacent_vertices(net, V(net), mode=c("out", "in", "all", "total"))
degree(net, v = V(net), mode = c("all", "out", "in", "total"), loops = TRUE, normalized = FALSE)
net=set_vertex_attr(net, "Type", index=V(net), c("leap", "nonleap","nonleap","nonleap",
"leap", "nonleap", "nonleap", "nonleap",
"leap", "nonleap", "nonleap"))
e=set_edge_attr(net, "Weight", index=V(net), c(""))
nnet=as.directed(net)
plot.igraph(nnet,vertex.label=V(net)$name,layout=layout.fruchterman.reingold,
edge.arrow.size=0.5)
net
e=set_edge_attr(net, "Weight", index=V(net), c(1,1,1,1,1,1,1,1,1,1,5,1))
e=set_edge_attr(net, "Weight", index=V(net), c(1,1,1,5,1,1,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
1,5,1,1,1,1,1,1,1,1,1,1,1,1,1))
View(net)
View(net)
e=set_edge_attr(net, "Weight", index=V(net), c(1,1,1,1,1,1,1,1,1,5,1))
e
plot.igraph(net, vertex.label.color="red", vertex.label.dist=0, vertex.label.family="Helvetica",
vertex.frame.color="yellow", vertex.size=35)
plot.igraph(e, vertex.label.color="red", vertex.label.dist=0, vertex.label.family="Helvetica",
vertex.frame.color="yellow", vertex.size=35)
plot.igraph(net, vertex.label.color="red", vertex.label.dist=0, vertex.label.family="Helvetica",
vertex.frame.color="yellow", vertex.size=35)
newnet=as.directed(net, mode="arbitary")
newnet=as.directed(net, "arbitary")
newnet=as.directed(net, "arbitrary")
newnet
plot.igraph(newnet, vertex.label.color="red", vertex.label.dist=0, vertex.label.family="Helvetica",
vertex.frame.color="yellow", vertex.size=35)
get.adjacency(newnet)
d=data.frame(
In=dgr(newnet, "indegree", undirected = FALSE),
Out=dgr(newnet, "outdegree", undirected = FALSE))
dataset=read.csv('Position_Salaries.csv')
dataset=read.csv('C:/Code/Machine_Learning/Support_Vector_Regression/Position_Salaries.csv')
setwd("C:/Code/Machine_Learning/Support_Vector_Regression")
dataset=read.csv('Position_Salaries.csv')
dataset=dataset[2:3]
View(dataset)
View(dataset)
View(dataset_select)
View(dataset_select)
dataset=read.csv('Position_Salaries.csv')
View(dataset)
dataset=dataset[2:3]
# Fitting the SVR to the dataset
install.packages("e10")
# Fitting the SVR to the dataset
install.packages("e1071")
# Fitting the SVR to the dataset
# install.packages("e1071")
library(e1071)
regressor=svm(formula=Salary ~ ., data=dataset, type='eps-regression')
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred
View(dataset)
View(dataset)
library(ggplot2)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = dataset$Level, y = predict(regressor, newdata = dataset)),
colour = 'blue') +
ggtitle('Truth or Bluff (SVR)') +
xlab('Level') +
ylab('Salary')
regressor=svm(formula=Salary ~ ., data=dataset, type='nu-regression')
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
y_pred
setwd("C:/Code/Machine_Learning/Decision_Tree_Regression")
# Importing the dataset
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
# Splitting the dataset into the Training set and Test set
# # install.packages('caTools')
# library(caTools)
# set.seed(123)
# split = sample.split(dataset$Salary, SplitRatio = 2/3)
# training_set = subset(dataset, split == TRUE)
# test_set = subset(dataset, split == FALSE)
# Feature Scaling
# training_set = scale(training_set)
# test_set = scale(test_set)
# Fitting the Regression Model to the dataset
# Create your regressor here
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# Fitting the Regression Model to the dataset
install.packages("rpart")
library(rpart)
dataset = read.csv('Position_Salaries.csv')
dataset = dataset[2:3]
regressor=rpart(formula= Salary ~., data=dataset)
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
regressor=rpart(formula= Salary ~., data=dataset, control=rpart.control(minsplit = 1))
# Predicting a new result
y_pred = predict(regressor, data.frame(Level = 6.5))
# install.packages('ggplot2')
library(ggplot2)
x_grid = seq(min(dataset$Level), max(dataset$Level), 0.1)
ggplot() +
geom_point(aes(x = dataset$Level, y = dataset$Salary),
colour = 'red') +
geom_line(aes(x = x_grid, y = predict(regressor, newdata = data.frame(Level = x_grid))),
colour = 'blue') +
ggtitle('Truth or Bluff (Regression Model)') +
xlab('Level') +
ylab('Salary')
