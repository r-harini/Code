<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20194.20.0323.1706                               -->
<workbook original-version='18.1' source-build='2019.4.5 (20194.20.0323.1706)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <SheetIdentifierTracking ignorable='true' predowngraded='true' />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <datasources>
    <datasource hasconnection='false' inline='true' name='Parameters' version='18.1'>
      <aliases enabled='yes' />
      <column caption='AR (Time Lag)' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <members>
          <member value='0' />
          <member value='1' />
          <member value='2' />
          <member value='3' />
          <member value='4' />
        </members>
      </column>
      <column caption='I (Seasonality)' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <members>
          <member value='0' />
          <member value='1' />
          <member value='2' />
          <member value='3' />
          <member value='4' />
        </members>
      </column>
      <column caption='MA (Moving Average)' datatype='integer' datatype-customized='true' name='[Parameter 3]' param-domain-type='list' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <members>
          <member value='0' />
          <member value='1' />
          <member value='2' />
          <member value='3' />
          <member value='4' />
        </members>
      </column>
      <column caption='Months Forecast' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='1'>
        <calculation class='tableau' formula='1' />
        <range max='48' min='1' />
      </column>
      <column caption='Seasonal AR (Time Lag)' datatype='integer' name='[Parameter 5]' param-domain-type='list' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <members>
          <member value='0' />
          <member value='1' />
          <member value='2' />
          <member value='3' />
          <member value='4' />
        </members>
      </column>
      <column caption='Seasonal I (Seasonality)' datatype='integer' name='[Parameter 6]' param-domain-type='list' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <members>
          <member value='0' />
          <member value='1' />
          <member value='2' />
          <member value='3' />
          <member value='4' />
        </members>
      </column>
      <column caption='Seasonality MA (Moving Average)' datatype='integer' name='[Parameter 7]' param-domain-type='list' role='measure' type='quantitative' value='0'>
        <calculation class='tableau' formula='0' />
        <members>
          <member value='0' />
          <member value='1' />
          <member value='2' />
          <member value='3' />
          <member value='4' />
        </members>
      </column>
      <column caption='Period' datatype='integer' name='[Parameter 8]' param-domain-type='range' role='measure' type='quantitative' value='1'>
        <calculation class='tableau' formula='1' />
        <range max='24' min='1' />
      </column>
    </datasource>
    <datasource caption='datasets_1057_1913_AirPassengers' inline='true' name='federated.0d3hxth0hj91k61cbqwg30lehflv' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='datasets_1057_1913_AirPassengers' name='textscan.09tzlho0yxhw8v1ao23ig0m10t6o'>
            <connection class='textscan' directory='C:/Code/DV_Lab/Lab13' filename='datasets_1057_1913_AirPassengers.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <relation connection='textscan.09tzlho0yxhw8v1ao23ig0m10t6o' name='datasets_1057_1913_AirPassengers.csv' table='[datasets_1057_1913_AirPassengers#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='date' date-parse-format='yyyy-MM' name='Month' ordinal='0' />
            <column datatype='integer' name='#Passengers' ordinal='1' />
          </columns>
        </relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[datasets_1057_1913_AirPassengers.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Month</remote-name>
            <remote-type>7</remote-type>
            <local-name>[Month]</local-name>
            <parent-name>[datasets_1057_1913_AirPassengers.csv]</parent-name>
            <remote-alias>Month</remote-alias>
            <ordinal>0</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>#Passengers</remote-name>
            <remote-type>20</remote-type>
            <local-name>[#Passengers]</local-name>
            <parent-name>[datasets_1057_1913_AirPassengers.csv]</parent-name>
            <remote-alias>#Passengers</remote-alias>
            <ordinal>1</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Number of Passengers' datatype='integer' name='[Calculation_1192891009214816257]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='LOOKUP(SUM([#Passengers]), [Parameters].[Parameter 4])'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Forecast date' datatype='date' name='[Calculation_1192891009214930946]' role='dimension' type='ordinal'>
        <calculation class='tableau' formula='DATE(DATETRUNC(&apos;month&apos;, DATEADD(&apos;month&apos;, [Parameters].[Parameter 4], [Month])))' />
      </column>
      <column caption='Past vs Future' datatype='string' name='[Calculation_1192891009215021059]' role='measure' type='nominal'>
        <calculation class='tableau' formula='IF LAST() &lt; [Parameters].[Parameter 4]&#13;&#10;THEN &apos;Model Forecast&apos;&#13;&#10;ELSE &apos;Model Prediction&apos;&#13;&#10;END'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Forecast' datatype='real' name='[Calculation_1192891009215143940]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;import pandas as pd&#13;&#10;import statsmodels.api as sm&#13;&#10;&#13;&#10;dates = _arg1&#13;&#10;passengers = _arg2&#13;&#10;order_ar = min(_arg3)&#13;&#10;order_i = min(_arg4)&#13;&#10;order_ma = min(_arg5)&#13;&#10;months_forecast = min(_arg6)&#13;&#10;seasonal_ar = min(_arg7)&#13;&#10;seasonal_i = min(_arg8)&#13;&#10;seasonal_ma = min(_arg9)&#13;&#10;period = min(_arg10)&#13;&#10;&#13;&#10;y = pd.Series(data=passengers, index=dates)&#13;&#10;&#13;&#10;mod = sm.tsa.statespace.SARIMAX(y,&#13;&#10;                                order=(order_ar, order_i, order_ma),&#13;&#10;                                seasonal_order=(seasonal_ar, seasonal_i, seasonal_ma, period),&#13;&#10;                                enforce_stationarity=False,&#13;&#10;                                enforce_invertibility=False)&#13;&#10;&#13;&#10;results = mod.fit()&#13;&#10;&#13;&#10;pred_uc = results.get_forecast(steps=months_forecast)&#13;&#10;&#13;&#10;pred = results.get_prediction(start=(pd.to_datetime(&quot;1949-01-01&quot;)) + pd.DateOffset(months=months_forecast), dynamic=False)&#13;&#10;&#13;&#10;data = list(pred.predicted_mean)&#13;&#10;data.extend(pred_uc.predicted_mean)&#13;&#10;&#13;&#10;return data&#13;&#10;&apos;,&#13;&#10;ATTR([Month]),&#13;&#10;ATTR([#Passengers]),&#13;&#10;MIN([Parameters].[Parameter 1]),&#13;&#10;MIN([Parameters].[Parameter 2]),&#13;&#10;MIN([Parameters].[Parameter 3]),&#13;&#10;MIN([Parameters].[Parameter 4]),&#13;&#10;MIN([Parameters].[Parameter 5]),&#13;&#10;MIN([Parameters].[Parameter 6]),&#13;&#10;MIN([Parameters].[Parameter 7]),&#13;&#10;MIN([Parameters].[Parameter 8]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column caption='Mean Squared Error' datatype='real' name='[Calculation_1192891009215619077]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;import pandas as pd&#13;&#10;import statsmodels.api as sm&#13;&#10;&#13;&#10;dates = _arg1&#13;&#10;passengers = _arg2&#13;&#10;order_ar = min(_arg3)&#13;&#10;order_i = min(_arg4)&#13;&#10;order_ma = min(_arg5)&#13;&#10;months_forecast = min(_arg6)&#13;&#10;seasonal_ar = min(_arg7)&#13;&#10;seasonal_i = min(_arg8)&#13;&#10;seasonal_ma = min(_arg9)&#13;&#10;period = min(_arg10)&#13;&#10;&#13;&#10;y = pd.Series(data=passengers, index=dates)&#13;&#10;&#13;&#10;mod = sm.tsa.statespace.SARIMAX(y,&#13;&#10;                                order=(order_ar, order_i, order_ma),&#13;&#10;                                seasonal_order=(seasonal_ar, seasonal_i, seasonal_ma, period),&#13;&#10;                                enforce_stationarity=False,&#13;&#10;                                enforce_invertibility=False)&#13;&#10;&#13;&#10;results = mod.fit()&#13;&#10;&#13;&#10;pred = results.get_prediction(start=pd.to_datetime(&quot;1951-01-01&quot;), dynamic=False)&#13;&#10;&#13;&#10;# Extract the predicted and true values of our time series&#13;&#10;y_forecasted = pred.predicted_mean&#13;&#10;y_truth = y[&quot;1958-01-01&quot;:]&#13;&#10;&#13;&#10;# Compute the mean square error&#13;&#10;mse = ((y_forecasted - y_truth) ** 2).mean()&#13;&#10;&#13;&#10;return mse&#13;&#10;&apos;,&#13;&#10;ATTR([Month]),&#13;&#10;ATTR([#Passengers]),&#13;&#10;MIN([Parameters].[Parameter 1]),&#13;&#10;MIN([Parameters].[Parameter 2]),&#13;&#10;MIN([Parameters].[Parameter 3]),&#13;&#10;MIN([Parameters].[Parameter 4]),&#13;&#10;MIN([Parameters].[Parameter 5]),&#13;&#10;MIN([Parameters].[Parameter 6]),&#13;&#10;MIN([Parameters].[Parameter 7]),&#13;&#10;MIN([Parameters].[Parameter 8]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='integer' name='[Number of Records]' role='measure' type='quantitative' user:auto-column='numrec'>
        <calculation class='tableau' formula='1' />
      </column>
      <layout dim-ordering='alphabetic' dim-percentage='0.469051' measure-ordering='alphabetic' measure-percentage='0.277854' parameter-percentage='0.253095' show-structure='true' />
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;India&quot;' />
      </semantic-values>
      <datasource-dependencies datasource='Parameters'>
        <column caption='AR (Time Lag)' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
        </column>
        <column caption='I (Seasonality)' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
        </column>
        <column caption='MA (Moving Average)' datatype='integer' datatype-customized='true' name='[Parameter 3]' param-domain-type='list' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
        </column>
        <column caption='Months Forecast' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='1'>
          <calculation class='tableau' formula='1' />
          <range max='48' min='1' />
        </column>
        <column caption='Seasonal AR (Time Lag)' datatype='integer' name='[Parameter 5]' param-domain-type='list' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
        </column>
        <column caption='Seasonal I (Seasonality)' datatype='integer' name='[Parameter 6]' param-domain-type='list' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
        </column>
        <column caption='Seasonality MA (Moving Average)' datatype='integer' name='[Parameter 7]' param-domain-type='list' role='measure' type='quantitative' value='0'>
          <calculation class='tableau' formula='0' />
        </column>
        <column caption='Period' datatype='integer' name='[Parameter 8]' param-domain-type='range' role='measure' type='quantitative' value='1'>
          <calculation class='tableau' formula='1' />
          <range max='24' min='1' />
        </column>
      </datasource-dependencies>
    </datasource>
  </datasources>
  <worksheets>
    <worksheet name='Sheet 1'>
      <table>
        <view>
          <datasources>
            <datasource caption='datasets_1057_1913_AirPassengers' name='federated.0d3hxth0hj91k61cbqwg30lehflv' />
            <datasource name='Parameters' />
          </datasources>
          <datasource-dependencies datasource='Parameters'>
            <column caption='AR (Time Lag)' datatype='integer' name='[Parameter 1]' param-domain-type='list' role='measure' type='quantitative' value='0'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='I (Seasonality)' datatype='integer' name='[Parameter 2]' param-domain-type='list' role='measure' type='quantitative' value='0'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='MA (Moving Average)' datatype='integer' datatype-customized='true' name='[Parameter 3]' param-domain-type='list' role='measure' type='quantitative' value='0'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='Months Forecast' datatype='integer' name='[Parameter 4]' param-domain-type='range' role='measure' type='quantitative' value='1'>
              <calculation class='tableau' formula='1' />
              <range max='48' min='1' />
            </column>
            <column caption='Seasonal AR (Time Lag)' datatype='integer' name='[Parameter 5]' param-domain-type='list' role='measure' type='quantitative' value='0'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='Seasonal I (Seasonality)' datatype='integer' name='[Parameter 6]' param-domain-type='list' role='measure' type='quantitative' value='0'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='Seasonality MA (Moving Average)' datatype='integer' name='[Parameter 7]' param-domain-type='list' role='measure' type='quantitative' value='0'>
              <calculation class='tableau' formula='0' />
            </column>
            <column caption='Period' datatype='integer' name='[Parameter 8]' param-domain-type='range' role='measure' type='quantitative' value='1'>
              <calculation class='tableau' formula='1' />
              <range max='24' min='1' />
            </column>
          </datasource-dependencies>
          <datasource-dependencies datasource='federated.0d3hxth0hj91k61cbqwg30lehflv'>
            <column datatype='integer' name='[#Passengers]' role='measure' type='quantitative' />
            <column caption='Forecast date' datatype='date' name='[Calculation_1192891009214930946]' role='dimension' type='ordinal'>
              <calculation class='tableau' formula='DATE(DATETRUNC(&apos;month&apos;, DATEADD(&apos;month&apos;, [Parameters].[Parameter 4], [Month])))' />
            </column>
            <column caption='Forecast' datatype='real' name='[Calculation_1192891009215143940]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SCRIPT_REAL(&#13;&#10;&apos;&#13;&#10;import pandas as pd&#13;&#10;import statsmodels.api as sm&#13;&#10;&#13;&#10;dates = _arg1&#13;&#10;passengers = _arg2&#13;&#10;order_ar = min(_arg3)&#13;&#10;order_i = min(_arg4)&#13;&#10;order_ma = min(_arg5)&#13;&#10;months_forecast = min(_arg6)&#13;&#10;seasonal_ar = min(_arg7)&#13;&#10;seasonal_i = min(_arg8)&#13;&#10;seasonal_ma = min(_arg9)&#13;&#10;period = min(_arg10)&#13;&#10;&#13;&#10;y = pd.Series(data=passengers, index=dates)&#13;&#10;&#13;&#10;mod = sm.tsa.statespace.SARIMAX(y,&#13;&#10;                                order=(order_ar, order_i, order_ma),&#13;&#10;                                seasonal_order=(seasonal_ar, seasonal_i, seasonal_ma, period),&#13;&#10;                                enforce_stationarity=False,&#13;&#10;                                enforce_invertibility=False)&#13;&#10;&#13;&#10;results = mod.fit()&#13;&#10;&#13;&#10;pred_uc = results.get_forecast(steps=months_forecast)&#13;&#10;&#13;&#10;pred = results.get_prediction(start=(pd.to_datetime(&quot;1949-01-01&quot;)) + pd.DateOffset(months=months_forecast), dynamic=False)&#13;&#10;&#13;&#10;data = list(pred.predicted_mean)&#13;&#10;data.extend(pred_uc.predicted_mean)&#13;&#10;&#13;&#10;return data&#13;&#10;&apos;,&#13;&#10;ATTR([Month]),&#13;&#10;ATTR([#Passengers]),&#13;&#10;MIN([Parameters].[Parameter 1]),&#13;&#10;MIN([Parameters].[Parameter 2]),&#13;&#10;MIN([Parameters].[Parameter 3]),&#13;&#10;MIN([Parameters].[Parameter 4]),&#13;&#10;MIN([Parameters].[Parameter 5]),&#13;&#10;MIN([Parameters].[Parameter 6]),&#13;&#10;MIN([Parameters].[Parameter 7]),&#13;&#10;MIN([Parameters].[Parameter 8]))'>
                <table-calc ordering-type='Rows' />
              </calculation>
            </column>
            <column datatype='date' name='[Month]' role='dimension' type='ordinal' />
            <column-instance column='[Calculation_1192891009215143940]' derivation='User' name='[usr:Calculation_1192891009215143940:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Columns' />
            </column-instance>
            <column-instance column='[Calculation_1192891009214930946]' derivation='Year' name='[yr:Calculation_1192891009214930946:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>([federated.0d3hxth0hj91k61cbqwg30lehflv].[yr:Calculation_1192891009214930946:ok] * [federated.0d3hxth0hj91k61cbqwg30lehflv].[usr:Calculation_1192891009215143940:qk])</rows>
        <cols />
      </table>
      <simple-id uuid='{BA1EFEC5-2D28-42F1-8226-EB78886C858F}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.125' source-height='32'>
    <window class='worksheet' maximized='true' name='Sheet 1'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='30'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.0d3hxth0hj91k61cbqwg30lehflv].[yr:Calculation_1192891009214930946:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{148BC4C3-43AD-4AB2-ACF6-9B0C78677B17}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='384' name='Sheet 1' width='288'>
      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
      2RIIGh//H/9ZMJgNSQ8tAAAAAElFTkSuQmCC
    </thumbnail>
  </thumbnails>
</workbook>
