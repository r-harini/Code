df%>%
filter(age<30 & bmi>30)%>%
group_by(type)%>%
summarise(mean(bp), mean(glu))
df%>%
filter(npreg>mean(npreg) & skin<20)%>%
summarise(var(bmi))
hist(df$age, main="Range of Age")
hist(df$age, main="Range of Age", xlab = "Age", col = "light blue")
c=df%>%
group_by(type)%>%
tally()
barplot(c)
c
barplot(c$n)
barplot(c$n, main="Frequnecy of Type", names.arg = c$type)
barplot(c$n, main="Frequnecy of Type", names.arg = c$type, col=c("blue", "red"))
c
boxplot(df$bp)
boxplot(df$bp, main="Summary Statistics of bp")
plot(df$glu, df$skin, main = "Scatter Plot between Glue and Skin")
plot(df$glu, df$skin, main = "Scatter Plot between Glue and Skin", xlab = "Glucose", ylab="Skin")
ggplot(df, aes(x=bmi, y=ped))+geom_point()+facet_wrap(~type)
ggplot(df, aes(x=bmi, y=ped))+geom_point()+facet_wrap(~type)+labs(title="BMI vs Ped")
ggplot(df, aes(x=preg,y=bp, fill=type))+geom_bar(stat="identity", width=1)+coord_polar("y", start=0)
ggplot(df, aes(x=npreg,y=bp, fill=type))+geom_bar(stat="identity", width=1)+coord_polar("y", start=0)
ggplot(df, aes(x=npreg,y=type, fill=type))+geom_bar(stat="identity", width=1)+coord_polar("y", start=0)
densityplot(df$bp)
density(df$bp)
d=density(df$bp)
plot(d)
ggplot(df, aes(x=bp, y=bmi, size=ped))+geom_point()
ggplot(df, aes(x=bp, y=bmi, size=ped, col="red"))+geom_point()
ggplot(df, aes(x=glu, y=age, shape=type))+geom_point()
ggplot(df, aes(x=skin, y=age))+geom_point()+geom_smooth()
ggplot(df, aes(x=skin, y=age))+geom_point()+geom_smooth(method = 'lm')
ggplot(df, aes(x=skin, y=age))+geom_point()+geom_smooth(method = 'lm')+labs(title="Skin vs Age")
ggplot(df, aes(x=glu, y=age, shape=type))+geom_point()+labs(title = "Age vs Glucose For different types")
ggplot(df, aes(x=bp, y=bmi, size=ped, col="red"))+geom_point()+labs(title = "Bp vs bmi with Ped")
plot(d, main="Density plot for BP")
summary(df$bp)
boxplot(df$bp, main="Summary Statistics of bp")
plot(df$glu, df$skin, main = "Scatter Plot between Glue and Skin", xlab = "Glucose", ylab="Skin", col="yellow")
plot(df$glu, df$skin, main = "Scatter Plot between Glue and Skin", xlab = "Glucose", ylab="Skin", col="green")
barplot(c$n, main="Frequnecy of Type", names.arg = c$type, col=c("blue", "red"))
df%>%
filter(type=="Yes")%>%
dplyr::select(npreg, age, type)
colMeans(df$npreg)
colMeans(df[1:2])
colMeans(df[1:8])
str(df)
colMeans(df[1:5])
colMeans(df[1:6])
colMeans(df[1:7])
colMeans(df[1:7])
d=colMeans(df[1:7])
d
cbind(d,c)
c=data.frame(type="nil", g_b=0)
c
cbind(d,c)
d=colMeans(df[1:7])
d
c=data.frame(type="nil", g_b=0)
c
rbind(d,c)
cbind(d,c)
d=data.frame(colMeans(df[1:7]))
d
c=data.frame(type="nil", g_b=0)
c
cbind(d,c)
arrange(df, bmi)%>%
filter(skin<25 & ped>1)
df%>%
group_by(type)%>%
filter(age>mean(age))
df%>%
group_by(type)%>%
filter(age>mean(age))%>%
summarise(var(bp))
rownames(df)
colnames(df)
library(ggplot2)
rm(list=ls())
library(dplyr)
library(ggplot2)
library(reactable)
data=read.csv("AB_NYC_2019.csv", stringsAsFactors = TRUE)
summary(data)
str(data)
dim(data)
colnames(data)
class(data$name)
data%>%distinct(name)
data$name=as.character(data$name)
class(data$name)
data=subset(data,select=-c(id,host_name,last_review))
sum(is.na(data$reviews_per_month))
data=data%>%mutate(reviews_per_month=replace(reviews_per_month,is.na(reviews_per_month),0))
sum(is.na(data$reviews_per_month))
nrow(data[which(data$price==0),])
data=data[!data$price==0,]
nrow(data[which(data$price==0),])
levels(data$neighbourhood_group)
top=data%>%
group_by(host_id)%>%
tally()
top
top=top[order(-top$n),]
top=head(top)
top
barplot(top$n, names.arg = top$host_id, xlab = "HOST IDS", ylab="LISTINGS", col="light blue")
d=table(data$neighbourhood_group)
d=d/nrow(data)
d
barplot(d, main="Relative Frequency of Neighbourhood group", col = "light blue")
pie(d)
levels(data$neighbourhood_group)
p1=data[data$neighbourhood_group=='Brooklyn','price']
p2=data[data$neighbourhood_group=='Manhattan','price']
p3=data[data$neighbourhood_group=='Queens','price']
p4=data[data$neighbourhood_group=='Staten Island','price']
p5=data[data$neighbourhood_group=='Bronx','price']
neigh_1=summary(p1)
neigh_2=summary(p2)
neigh_3=summary(p3)
neigh_4=summary(p4)
neigh_5=summary(p5)
neigh_prices=rbind(neigh_1, neigh_2, neigh_3, neigh_4, neigh_5)
row.names(neigh_prices)<-c('Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx')
neigh_prices
ggplot(data, aes(x=neighbourhood_group, y=price))+geom_boxplot(varwidth=T, fill="steelblue")
ggplot(data, aes(x=host_id, y=price))+geom_point()+facet_wrap(~neighbourhood_group)
orange_pal <- function(x) rgb(colorRamp(c("#ffe4cc", "#ff9500"))(x), maxColorValue = 255)
d=data%>%
group_by(neighbourhood)%>%
filter(reviews_per_month>1)%>%
summarize(mean(number_of_reviews),mean(reviews_per_month))
d
colnames(d)
list(background=color)
reactable(d, columns = list(
`mean(number_of_reviews)`=colDef(style = function(value){
normalized=(value-min(d$`mean(number_of_reviews)`))/max(d$`mean(number_of_reviews)`-min(d$`mean(number_of_reviews)`))
color=orange_pal(normalized)
list(background=color)
})
))
d
d=data%>%
group_by(neighbourhood)%>%
filter(reviews_per_month>1)%>%
summarize(round(mean(number_of_reviews),2),round(mean(reviews_per_month),2))
orange_pal <- function(x) rgb(colorRamp(c("#ffe4cc", "#ff9500"))(x), maxColorValue = 255)
reactable(d, columns = list(
`mean(number_of_reviews)`=colDef(style = function(value){
normalized=(value-min(d$`mean(number_of_reviews)`))/max(d$`mean(number_of_reviews)`-min(d$`mean(number_of_reviews)`))
color=orange_pal(normalized)
list(background=color)
})
))
d
d=data%>%
group_by(neighbourhood)%>%
filter(reviews_per_month>1)%>%
summarize(mean_reviews=round(mean(number_of_reviews),2),mean_reviews_per_month=round(mean(reviews_per_month),2))
d
normalized=(value-min(d$`mean_reviews`))/max(d$`mean_reviews`-min(d$`mean_reviews`))
d=data%>%
group_by(neighbourhood)%>%
filter(reviews_per_month>1)%>%
summarize(mean_reviews=round(mean(number_of_reviews),2),mean_reviews_per_month=round(mean(reviews_per_month),2))
d
orange_pal <- function(x) rgb(colorRamp(c("#ffe4cc", "#ff9500"))(x), maxColorValue = 255)
reactable(d, columns = list(
`mean_reviews`=colDef(style = function(value){
normalized=(value-min(d$`mean_reviews`))/max(d$`mean_reviews`-min(d$`mean_reviews`))
color=orange_pal(normalized)
list(background=color)
})
))
list(background=color)
color=orange_pal(normalized)
reactable(d, columns = list(
`mean_reviews`=colDef(
style = function(value){
normalized=(value-min(d$`mean_reviews`))/(max(d$mean_reviews)-min(d$`mean_reviews`))
color=orange_pal(normalized)
list(background=color)
}),
d$mean_reviews_per_month=colDef(
reactable(d, columns = list(
`mean_reviews`=colDef(
style = function(value){
normalized=(value-min(d$`mean_reviews`))/(max(d$mean_reviews)-min(d$`mean_reviews`))
color=orange_pal(normalized)
list(background=color)
}),
mean_reviews_per_month=colDef(
style=function(value){
normalized=(value-min(d$mean_reviews_per_month))/(max(d$mean_reviews_per_month)-min(d$mean_reviews_per_month))
color=orange_pal(normalized)
list(background=color)
}
)
))
red_pal=function(x)rgb(colorRamp(c("#63be7b", "#ffeb84"))(x),maxColorValue = 255)
color=red_pal(normalized)
reactable(d, columns = list(
`mean_reviews`=colDef(
style = function(value){
normalized=(value-min(d$`mean_reviews`))/(max(d$mean_reviews)-min(d$`mean_reviews`))
color=orange_pal(normalized)
list(background=color)
}),
mean_reviews_per_month=colDef(
style=function(value){
normalized=(value-min(d$mean_reviews_per_month))/(max(d$mean_reviews_per_month)-min(d$mean_reviews_per_month))
color=red_pal(normalized)
list(background=color)
}
)
))
reactable(d, columns = list(
`mean_reviews`=colDef(
style = function(value){
normalized=(value-min(d$`mean_reviews`))/(max(d$mean_reviews)-min(d$`mean_reviews`))
color=orange_pal(normalized)
list(background=color)
}),
mean_reviews_per_month=colDef(
style=function(value){
normalized=(value-min(d$mean_reviews_per_month))/(max(d$mean_reviews_per_month)-min(d$mean_reviews_per_month))
color=red_pal(normalized)
list(background=color)
}
)
),
bordered = TRUE)
levels(data$room_type)
data%>%
group_by(room_type)
data%>%
group_by(room_type)%>%
select(room_type, availability_365)
data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
install.packages("formattable")
library(formattable)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
d
formattable(d,list(
room_type=formatter("span", style=x~if(x=="Private room", style(color="green")), elseif(x=="Entire home/apt", style(color="blue")), else(style(color="red")))
formattable(d,list(
room_type=formatter("span", style=x~if(x=="Private room", style(color="green")), elseif(x=="Entire home/apt", style(color="blue")), else(style(color="red")))
formattable(d,list(
room_type=formatter("span", style=x~if(x=="Private room", style(color="green"),NA)
formattable(d,list(
room_type=formatter("span", style=x ~ if(x=="Private room", style(color="green"),NA)
formattable(d, list(
room_type=formatter("span", style=x ~ if(x=="Private room", style(color="green"),NA)
formattable(d list(
formattable(d, list(
room_type=formatter("span", style=x ~ if(x=="Private room" style(color="green"),NA)
formattable(d, list(
room_type=formatter("span" style=x ~ if(x=="Private room", style(color="green"),NA)
formattable(d, list(
room_type=formatter("span", style=x ~ if(x=="Private room", style(color="green"),NA)
formattable(d, list(
room_type=formatter("span", style=x ~ if(x=="Private room",style(color="green"),NA)
formattable(d,list(
room_type=formatter("span", style=x~if(x=="Private room", style(color="green")), else if(x=="Entire home/apt", style(color="blue")), else(style(color="red")))
formattable(d,list(
room_type=formatter("span", style=x~if(x=="Private room", style(color="green")) else if(x=="Entire home/apt", style(color="blue")), else(style(color="red")))
formattable(d,list(
room_type=formatter("span", style=x~if(x=="Private room", style(color="green")) else if(x=="Entire home/apt", style(color="blue")) else(style(color="red")))
room_type=formatter("span", style=x~if(x=="Private room", style(color="green")) elseif(x=="Entire home/apt" ,style(color="blue")) else(style(color="red")))
formattable(d,list(
room_type=formatter("span", style=x~if(x=="Private room", style(color="green")) elseif(x=="Entire home/apt" ,style(color="blue")) else(style(color="red")))
d
formattable(d, list(
room_type= formatter("span", style= x~ ifelse(x=="Private room",
style(color="green"),NA))
))
formattable(d, list(
room_type= formatter("span", style= x~ if(x=="Private room",
formattable(d, list(
room_type= formatter("span", style= x~ if(x=="Private room",
formattable(d, list(
room_type= formatter("span", style= x~ if(x=="Private room",
formattable(d, list(
room_type= formatter("span", style= x~ ifelse(x=="Private room",
style(color="green"),NA))
))
formattable(d, list(
availability_365= formatter("span", style= x~ ifelse(x==365,
style(color="green", font.weight="bold"),NA))
))
formattable(d, list(
availability_365= formatter("span", style= x~ ifelse(x==365,
style(color="green", font.weight="bold"),NA))
))
formattable(d, list(
availability_365= formatter("span", style= x~ ifelse(x==365,
style(color="green", font.weight="bold", backgroun="green"),NA))
))
formattable(d, list(
area(col=availability_365~normalize_bar("blue", 0.2))
))
formattable(d, list(
area(col=availability_365~normalize_bar("blue", 20))
))
formattable(d, list(
availability_365=color_tile("white", "orange")
))
formattable(d, list(
availability_365=color_tile("white", "green")
))
formattable(d, list(
availability_365=color_tile("white", "yellow")
))
formattable(d, list(
availability_365=color_tile("white", "red")
))
barplot(data$room_type, col = "red")
barplot(data$room_type, col =c("red", "blue", "green"))
barplot(data$room_type, col=c("red", "blue", "green"))
ggplot(data, aes(x=room_type))+geom_bar()
ggplot(data, aes(x=room_type))+geom_bar(colour=c("blue", "red", "green"))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(aes(label=tally(room_type)))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(aes(label=room_type))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(aes(label=tally(room_type)[2]))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(label=room_type)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(label=data$room_type)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(label=y)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(y=data$room_type)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
install.packages("gganimate")
library(gganimate)
View(data)
View(data)
rm(list=ls())
library(dplyr)
library(ggplot2)
library(reactable)
library(formattable)
cor(data)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
library(dplyr)
library(ggplot2)
library(reactable)
library(formattable)
data=read.csv("AB_NYC_2019.csv", stringsAsFactors = TRUE)
data%>%distinct(name)
data$name=as.character(data$name)
data=subset(data,select=-c(id,host_name,last_review))
sum(is.na(data$reviews_per_month))
data=data%>%mutate(reviews_per_month=replace(reviews_per_month,is.na(reviews_per_month),0))
sum(is.na(data$reviews_per_month))
nrow(data[which(data$price==0),])
data=data[!data$price==0,]
nrow(data[which(data$price==0),])
top=data%>%
group_by(host_id)%>%
tally()
top
top=top[order(-top$n),]
top=head(top)
top
barplot(top$n, names.arg = top$host_id, xlab = "HOST IDS", ylab="LISTINGS", col="light blue")
levels(data$neighbourhood_group)
p1=data[data$neighbourhood_group=='Brooklyn','price']
p2=data[data$neighbourhood_group=='Manhattan','price']
p3=data[data$neighbourhood_group=='Queens','price']
p4=data[data$neighbourhood_group=='Staten Island','price']
p5=data[data$neighbourhood_group=='Bronx','price']
neigh_1=summary(p1)
neigh_2=summary(p2)
neigh_3=summary(p3)
neigh_4=summary(p4)
neigh_5=summary(p5)
neigh_prices=rbind(neigh_1, neigh_2, neigh_3, neigh_4, neigh_5)
row.names(neigh_prices)<-c('Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx')
neigh_prices
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
formattable(d, list(
availability_365=color_tile("white", "red"),
))
formattable(d, list(
availability_365=color_tile("white", "red"),
minimum_nights=color_tile("white", "blue"),
price=color_tile("white", "pink")
))
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
formattable(d, list(
availability_365=color_tile("white", "red")
))
room_price=data%>%
group_by(room_type)%>%
summarise(avg_price=mean(price))
room_price
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity")
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("blue", "red", "yellow"))+geom_text(label=avg_price)
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("blue", "red", "yellow"))+geom_text(label=room_price$avg_price)
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)
room_price=data%>%
group_by(room_type)%>%
summarise(avg_price=round(mean(price),2))
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)+theme_dark()
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)+theme_minimal()
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)+theme_minimal()+xlab("Room Type")+ylab("Average Price")
plot(data$price, data$availability_365)
d=data%>%
filter(price>1000)
plot(d$price, d$availability_365)
d=data%>%
filter(price>1000 & availability_365!=0)
plot(d$price, d$availability_365)
ggplot(d, aes(x=price, y=availability_365, col=room_type))+geom_point()
ggplot(d, aes(x=price, y=availability_365, col=room_type))+geom_point()+xlabs("Price")+ylabs("Availability in 365 days")
ggplot(d, aes(x=price, y=availability_365, col=room_type))+geom_point()+xlab("Price")+ylab("Availability in 365 days")
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
d=head(d,100)
formattable(d, list(
availability_365=color_tile("white", "red")
))
d=head(d,50)
setwd("C:/Code/RStudio/Lab7")
rm(list=ls())
mydat <- PlantGrowth
str(mydat)
unique(mydat$group)
rm(list=ls())
library(dplyr)
library(dplyr)
library(ggplot2)
library(car)
library(ggplot2)
library(car)
library(ggpubr)
data=read.csv("heart.csv")
colnames(data)[1]="age"
colnames(data)
#Converting the required columns to factors
str(data)
data=data%>%
mutate(sex=replace(sex, sex==1, "Male"))
data=data%>%
mutate(sex=replace(sex, sex==0, "Female"))
data=data%>%
mutate(target=replace(target, target==1, "Yes"))
data=data%>%
mutate(target=replace(target, target==0, "No"))
data$sex=as.factor(data$sex)
data$target=as.factor(data$target)
data$slope=as.character(data$slope)
data$slope=as.factor(data$slope)
str(data)
levels(data$target)
data%>%
group_by(target)%>%
summarize(count=n(),mean=mean(trestbps), std_dev=sd(trestbps))
res=aov(trestbps~target,data=data)
summary.aov(res)
plot(res,1)
leveneTest(trestbps~target, data)
kruskal.test(trestbps~slope, data)
res2=aov(chol~sex+slope, data)
summary.aov(res2)
ao=aov(chol~sex*slope, data)
Anova(ao, type="III")
