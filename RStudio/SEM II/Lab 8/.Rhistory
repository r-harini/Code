#compute the frequency distribution of school variable
sch_freq <- table(painters$School)
cbind(sch_freq)
#compute the relative frequency of school variable
rel_sch_frequ <- sch_freq/nrow(painters)
old <- options(digits = 1)
rel_sch_frequ
cbind(rel_sch_frequ)
options(old)
#find the mean composition of painters in school 'C'
c_p <- painters[painters$School=='C',]
mean(c_p$Composition)
options(digits=2)
#find the mean composition of painters in all schools
tapply(painters$Composition, painters$School, mean)
View(c_p)
View(c_p)
rm(list=ls())
library(dplyr)
library(ggplot2)
library(car)
library(caret)
df=read.csv("CreditCard.csv")
str(df)
tai(df,10)
tail(df,10)
View(df)
View(df)
summary(df$income)
summary(df$income, df$share)
summary(df$share)
summary(df$expenditure)
df$card=as.factor(df$card)
str(df)
df$owner=as.factor(df$owner)
str(df)
df=read.csv("CreditCard.csv", stringsAsFactors = TRUE)
str(df)
tail(df,10)
d=df%>%
filter(owner='no' & card='no')
d=df%>%
filter(owner=='no' & card=='no')
mean(d$income)
which.max(d$share)
max(d$share)
min(d$expenditure)
s=sample(df$income, size=15)
s
boxplot(s)
boxplot(s, main="Samples of Income")
sd(df$income)
newdf=df%>%
mutate(case_when(income<=2.5~"low",
income>=2.5 & income<=4~"medium",
income>4~"high"))
View(newdf)
View(newdf)
newdf=df%>%
mutate(income_cat=case_when(income<=2.5~"low",
income>=2.5 & income<=4~"medium",
income>4~"high"))
View(newdf)
View(newdf)
colnames(newdf)
head(newdf$income_cat,10)
freq=table(df$owner)
freq
rel_freq=freq/nrows(df)
rel_freq=freq/nrow(df)
rel_freq
ggplot(df, aes(x=owner, fill=owner))+geom_bar()
ggplot(df, aes(x=owner, fill=owner))+geom_bar()+ggtitle("Frequency distribution of the owners")+xlab("Owning the house: Yes or No")+ylab("Frequency")
cor(df$income, df$expenditure)
data=df[,2:13]
View(data)
View(data)
View(data)
View(data)
View(df)
View(df)
set.seed(123)
train_samples <- data$expenditure %>%
createDataPartition(p=0.8,list=FALSE)
train <- data[train_samples,]
test <- data[-train_samples,]
model1=lm(expenditure~.,data=train)
summary(model1)
pred=model1%>%
predict(test)
confint(model1)
vif(model1)
model2=lm(expenditure~.-selfempyes, data=train)
model2=lm(expenditure~.-selfemp, data=train)
summary(model2)
model2=lm(expenditure~.-selfemp,-owner, data=train)
model2=lm(expenditure~.-selfemp, data=train)
summary(model2)
model3=lm(expenditure~
income+share+months+active, data=train)
summary(model3)
RMSE(pred,test$expenditure)
R2(pred,test$expenditure)
pred2=model1%>%
predict(test)
RMSE(pred2, test$expenditure)
R2(pred2,test$expenditure)
model3=lm(expenditure~
income*share*months+*active, data=train)
model3=lm(expenditure~
income*share*months*active, data=train)
summary(model3)
pred2=model2%>%
predict(test)
RMSE(pred2, test$expenditure)
R2(pred2,test$expenditure)
model2=lm(expenditure~.-selfemp,-owner, data=train)
model2=lm(expenditure~.-selfemp-owner, data=train)
summary(model2)
model2=lm(expenditure~.-selfemp-card-majorcards, data=train)
summary(model2)
pred2=model2%>%
predict(test)
RMSE(pred2, test$expenditure)
R2(pred2,test$expenditure)
model3=lm(expenditure~
age*dependents,data=train)
summary(model3)
model3=lm(expenditure~
age*dependents+months,data=train)
summary(model3)
model3=lm(expenditure~
age+dependents+months,data=train)
summary(model3)
model3=lm(expenditure~
age+dependents+months+active,data=train)
summary(model3)
pred3=model3%>%
predict(test)
RMSE(pred3, test$expenditure)
R2(pred3, test$expenditure)
model4=lm(expenditure~log(share)*age*income*dependents,data=train)
summary(model4)
pred4=model4%>%
predict(test)
RMSE(pred4,test$expenditure)
R2(pred4,test$expenditure)
pred5=model5%>%
predict(test)
model5=lm(expenditure~
income*share*months*active, data=train)
summary(model5)
pred5=model5%>%
predict(test)
RMSE(pred5,test$expenditure)
R2(pred5,test$expenditure)
plot(model5,1)
plot(model5,1)
plot(model5,2)
plot(model5,3)
plot(model5,4)
table(newdf$income_cat,newdf$card)
t=newdf%>%
filter(card=="no")
table(t$income_cat)
which.max(table(t$income_cat))
which.max(table(t$income_cat))[1]
which.max(table(t$income_cat))[[1]]
max(table(t$income_cat))
which.max(table(t$income_cat))[1]
max(table(t$income_cat))
View(newdf)
View(newdf)
newdf%>%
filter(income_cat=="low" & owner=="yes" & selfemp=="yes" & card=="yest")
newdf%>%
filter(income_cat=="low" & owner=="yes" & selfemp=="yes" & card=="yes")
median(d$share)
s=sample(df$income, size=15)
boxplot(s, main="Samples of Income")
View(newdf)
View(newdf)
model6=lm(expenditure~
card*income*share*selfemp*majorcards,data=train)
summary(model6)
pred6=model6%>%
predict(test)
pred6=model6%>%
predict(test)
RMSE(pred6,test$expenditure)
R2(pred6,test$expenditure)
model6=lm(expenditure~
card*income*selfemp*majorcards,data=train)
summary(model6)
pred6=model6%>%
predict(test)
RMSE(pred6,test$expenditure)
R2(pred6,test$expenditure)
rm(list=ls())
library(dplyr)
library(ggplot2)
library(car)
library(car)
library(ggpubr)
data=read.csv("heart.csv")
colnames(data)[1]="age"
colnames(data)
#Converting the required columns to factors
str(data)
#Converting the required columns to factors
str(data)
data=data%>%
mutate(sex=replace(sex, sex==1, "Male"))
data=data%>%
mutate(sex=replace(sex, sex==1, "Male"))
data=data%>%
mutate(sex=replace(sex, sex==0, "Female"))
data=data%>%
mutate(sex=replace(sex, sex==0, "Female"))
data=data%>%
mutate(target=replace(target, target==1, "Yes"))
data=data%>%
mutate(sex=replace(sex, sex==1, "Male"))
data=data%>%
mutate(sex=replace(sex, sex==0, "Female"))
data=data%>%
mutate(target=replace(target, target==1, "Yes"))
data=data%>%
mutate(target=replace(target, target==0, "No"))
data=data%>%
mutate(sex=replace(sex, sex==1, "Male"))
data=data%>%
mutate(sex=replace(sex, sex==0, "Female"))
data=data%>%
mutate(target=replace(target, target==1, "Yes"))
data=data%>%
mutate(target=replace(target, target==0, "No"))
data$sex=as.factor(data$sex)
data$slope=as.character(data$slope)
data$slope=as.factor(data$slope)
str(data)
var.test(chol~slope, data=data, alternative="two.sided")
var.test(chol~sex, data=data, alternative="two.sided")
res=var.test(chol~slope,data)
res=var.test(chol~sex, data=data, alternative="two.sided")
res
res.ftest$estimate
res$estimate
res$p.value
Sys.Date()
Sys.time()
Sys.timezone()
as.Date("1979-03-21")
months("1979-03-21")
months("2020-8-6")
weekdays("2020-8-6")
d=as.Date("2020-8-6")
weekdays(d)
seq(d,by="2 months", length.out = 6)
library(ggplot2)
library(ggthemes)
library(lubridate)
install.packages(ggthemes)
"ggthemes"
install.packages("ggthemes")
library(ggthemes)
library(dplyr)
library(tidyr)
library(DT)
install.packages("DT")
library(DT)
library(scales)
colors = c(""#CC1011", "#665555", "#05a399", "#cfcaca", "#f5e840", "#0683c9", "#e075b0"")
exit
colors = c("#CC1011", "#665555", "#05a399", "#cfcaca", "#f5e840", "#0683c9", "#e075b0")
apr_data <- read.csv("uber-raw-data-apr14.csv")
apr_data <- read.csv("uber-raw-data-apr14.csv")
may_data <- read.csv("uber-raw-data-may14.csv")
apr_data <- read.csv("uber-raw-data-apr14.csv")
may_data <- read.csv("uber-raw-data-may14.csv")
jun_data <- read.csv("uber-raw-data-jun14.csv")
jul_data <- read.csv("uber-raw-data-jul14.csv")
jul_data <- read.csv("uber-raw-data-jul14.csv")
aug_data <- read.csv("uber-raw-data-aug14.csv")
sep_data <- read.csv("uber-raw-data-sep14.csv")
data_2014 <- rbind(apr_data,may_data, jun_data, jul_data, aug_data, sep_data)
data_2014$Date.Time <- as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
data_2014$hour <- factor(hour(hms(data_2014$Time)))
data_2014$hour <- factor(hour(hms(data_2014$Time)))
data_2014$minute <- factor(minute(hms(data_2014$Time)))
data_2014$second <- factor(second(hms(data_2014$Time)))
data_2014$Date.Time <- ymd_hms(data_2014$Date.Time)
data_2014$Date.Time <- ymd_hms(data_2014$Date.Time)
data_2014$hour <- factor(hour(hms(data_2014$Time)))
rm(list=ls())
library(ggplot2)
library(ggthemes)
library(lubridate)
library(dplyr)
library(tidyr)
library(DT)
library(scales)
colors = c("#CC1011", "#665555", "#05a399", "#cfcaca", "#f5e840", "#0683c9", "#e075b0")
apr_data <- read.csv("uber-raw-data-apr14.csv")
apr_data <- read.csv("uber-raw-data-apr14.csv")
may_data <- read.csv("uber-raw-data-may14.csv")
may_data <- read.csv("uber-raw-data-may14.csv")
jun_data <- read.csv("uber-raw-data-jun14.csv")
jul_data <- read.csv("uber-raw-data-jul14.csv")
aug_data <- read.csv("uber-raw-data-aug14.csv")
sep_data <- read.csv("uber-raw-data-sep14.csv")
data_2014 <- rbind(apr_data,may_data, jun_data, jul_data, aug_data, sep_data)
data_2014$Date.Time <- as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S")
data_2014$Time <- format(as.POSIXct(data_2014$Date.Time, format = "%m/%d/%Y %H:%M:%S"), format="%H:%M:%S")
data_2014$Date.Time <- ymd_hms(data_2014$Date.Time)
data_2014$day <- factor(day(data_2014$Date.Time))
data_2014$month <- factor(month(data_2014$Date.Time, label = TRUE))
data_2014$month <- factor(month(data_2014$Date.Time, label = TRUE))
data_2014$year <- factor(year(data_2014$Date.Time))
data_2014$year <- factor(year(data_2014$Date.Time))
data_2014$dayofweek <- factor(wday(data_2014$Date.Time, label = TRUE))
data_2014$hour <- factor(hour(hms(data_2014$Time)))
data_2014$minute <- factor(minute(hms(data_2014$Time)))
data_2014$minute <- factor(minute(hms(data_2014$Time)))
data_2014$second <- factor(second(hms(data_2014$Time)))
hour_data <- data_2014 %>%
group_by(hour) %>%
dplyr::summarize(Total = n())
datatable(hour_data)
ggplot(hour_data, aes(hour, Total)) +
geom_bar( stat = "identity", fill = "steelblue", color = "red") +
ggtitle("Trips Every Hour") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma)
month_hour <- data_2014 %>%
group_by(month, hour) %>%
dplyr::summarize(Total = n())
ggplot(month_hour, aes(hour, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Hour and Month") +
scale_y_continuous(labels = comma)
day_group <- data_2014 %>%
group_by(day) %>%
dplyr::summarize(Total = n())
datatable(day_group)
ggplot(day_group, aes(day, Total)) +
geom_bar( stat = "identity", fill = "steelblue") +
ggtitle("Trips Every Day") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma)
day_month_group <- data_2014 %>%
group_by(month, day) %>%
dplyr::summarize(Total = n())
ggplot(day_month_group, aes(day, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Day and Month") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
month_group <- data_2014 %>%
group_by(month) %>%
dplyr::summarize(Total = n())
datatable(month_group)
ggplot( month_group, aes(month, Total, fill = month)) +
geom_bar( stat = "identity") +
ggtitle("Trips by Month") +
theme(legend.position = "none") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
month_weekday <- data_2014 %>%
group_by(month, dayofweek) %>%
dplyr::summarize(Total = n())
ggplot(month_weekday, aes(month, Total, fill = dayofweek)) +
geom_bar( stat = "identity", position = "dodge") +
ggtitle("Trips by Day and Month") +
scale_y_continuous(labels = comma) +
scale_fill_manual(values = colors)
ggplot(data_2014, aes(Base)) +
geom_bar(fill = "darkred") +
scale_y_continuous(labels = comma) +
ggtitle("Trips by Bases")
ggplot(data_2014, aes(Base, fill = month)) +
geom_bar(position = "dodge") +
scale_y_continuous(labels = comma) +
ggtitle("Trips by Bases and Month") +
scale_fill_manual(values = colors)
ggplot(data_2014, aes(Base, fill = dayofweek)) +
geom_bar(position = "dodge") +
scale_y_continuous(labels = comma) +
ggtitle("Trips by Bases and DayofWeek") +
scale_fill_manual(values = colors)
day_and_hour <- data_2014 %>%
group_by(day, hour) %>%
dplyr::summarize(Total = n())
datatable(day_and_hour)
ggplot(day_and_hour, aes(day, hour, fill = Total)) +
geom_tile(color = "white") +
ggtitle("Heat Map by Hour and Day")
ggplot(day_month_group, aes(day, month, fill = Total)) +
geom_tile(color = "white") +
ggtitle("Heat Map by Month and Day")
ggplot(month_weekday, aes(dayofweek, month, fill = Total)) +
geom_tile(color = "white") +
ggtitle("Heat Map by Month and Day of Week")
install.packages("clValid")
setwd("C:/Code/RStudio/SEM II/Lab 8")
m(list=ls())
rm(list=ls())
setwd("C:/Code/RStudio/SEM II/Lab 8")
data <- read.csv("iris.csv",row.names=1)
df <- scale(data)
dissim <- dist(df, method = 'euclidean')
hierClust <- hclust(dissim, method = 'average')
plot(hierClust)
cluster <- cutree(hierClust, k = 3)
#install.packages("clValid")
library(clValid)
dunn(dissim, cluster)
# plot(hclust_avg)
rect.hclust(hierClust, k = 3, border = 2:4)
abline(h = 3, col = 'red')
Kmax <- 10
D <- rep(0,Kmax)
for (i in 2:Kmax){
cluster<- cutree(hierClust, k=i)
D[i] <- dunn(dissim, cluster)
}
plot(2:Kmax,D[2:Kmax],type="b",pch=19)
rm(list=ls())
setwd("C:/Code/RStudio/SEM II/Lab 8")
data <- read.csv("iris.csv",row.names=1)
#as it is distance based metric, we scale to obtain better accuracy.
df <- scale(data)
#computing dis-similarity matrix
dissim <- dist(df, method = 'euclidean')
hierClust <- hclust(dissim, method = 'average')
plot(hierClust)
cluster <- cutree(hierClust, k = 3)
library(clValid)
#higher the dunn index, more compact(better) the clusters are
dunn(dissim, cluster)
# plot(hclust_avg)
rect.hclust(hierClust, k = 3, border = 2:4)
abline(h = 3, col = 'red')
rm(list=ls())
setwd("C:/Code/RStudio/SEM II/Lab 8")
data <- read.csv("iris.csv",row.names=1)
#as it is distance based metric, we scale to obtain better accuracy.
df <- scale(data)
#computing dis-similarity matrix
dissim <- dist(df, method = 'euclidean')
hierClust <- hclust(dissim, method = 'single')
plot(hierClust)
cluster <- cutree(hierClust, k = 3)
library(clValid)
#higher the dunn index, more compact(better) the clusters are
dunn(dissim, cluster)
# plot(hclust_avg)
rect.hclust(hierClust, k = 3, border = 2:4)
abline(h = 3, col = 'red')
Kmax <- 10
D <- rep(0,Kmax)
for (i in 2:Kmax){
cluster<- cutree(hierClust, k=i)
D[i] <- dunn(dissim, cluster)
}
plot(2:Kmax,D[2:Kmax],type="b",pch=19)
rm(list=ls())
setwd("C:/Code/RStudio/SEM II/Lab 8")
data <- read.csv("iris.csv",row.names=1)
#as it is distance based metric, we scale to obtain better accuracy.
df <- scale(data)
#computing dis-similarity matrix
dissim <- dist(df, method = 'euclidean')
hierClust <- hclust(dissim, method = 'average')
plot(hierClust)
cluster <- cutree(hierClust, k = 3)
library(clValid)
#higher the dunn index, more compact(better) the clusters are
dunn(dissim, cluster)
# plot(hclust_avg)
rect.hclust(hierClust, k = 3, border = 2:4)
abline(h = 3, col = 'red')
Kmax <- 10
D <- rep(0,Kmax)
for (i in 2:Kmax){
cluster<- cutree(hierClust, k=i)
D[i] <- dunn(dissim, cluster)
}
plot(2:Kmax,D[2:Kmax],type="b",pch=19)
rm(list=ls())
setwd("C:/Code/RStudio/SEM II/Lab 8")
data <- read.csv("iris.csv",row.names=1)
#as it is distance based metric, we scale to obtain better accuracy.
df <- scale(data)
#computing dis-similarity matrix
dissim <- dist(df, method = 'euclidean')
hierClust <- hclust(dissim, method = 'complete')
plot(hierClust)
cluster <- cutree(hierClust, k = 3)
library(clValid)
#higher the dunn index, more compact(better) the clusters are
dunn(dissim, cluster)
# plot(hclust_avg)
rect.hclust(hierClust, k = 3, border = 2:4)
abline(h = 3, col = 'red')
Kmax <- 10
D <- rep(0,Kmax)
for (i in 2:Kmax){
cluster<- cutree(hierClust, k=i)
D[i] <- dunn(dissim, cluster)
}
plot(2:Kmax,D[2:Kmax],type="b",pch=19)
