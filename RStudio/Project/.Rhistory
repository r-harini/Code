availability_365=color_tile("white", "yellow")
))
formattable(d, list(
availability_365=color_tile("white", "red")
))
barplot(data$room_type, col = "red")
barplot(data$room_type, col =c("red", "blue", "green"))
barplot(data$room_type, col=c("red", "blue", "green"))
ggplot(data, aes(x=room_type))+geom_bar()
ggplot(data, aes(x=room_type))+geom_bar(colour=c("blue", "red", "green"))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(aes(label=tally(room_type)))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(aes(label=room_type))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(aes(label=tally(room_type)[2]))
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(label=room_type)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(label=data$room_type)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(label=y)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))+geom_text(y=data$room_type)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
install.packages("gganimate")
library(gganimate)
View(data)
View(data)
rm(list=ls())
library(dplyr)
library(ggplot2)
library(reactable)
library(formattable)
cor(data)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
library(dplyr)
library(ggplot2)
library(reactable)
library(formattable)
data=read.csv("AB_NYC_2019.csv", stringsAsFactors = TRUE)
data%>%distinct(name)
data$name=as.character(data$name)
data=subset(data,select=-c(id,host_name,last_review))
sum(is.na(data$reviews_per_month))
data=data%>%mutate(reviews_per_month=replace(reviews_per_month,is.na(reviews_per_month),0))
sum(is.na(data$reviews_per_month))
nrow(data[which(data$price==0),])
data=data[!data$price==0,]
nrow(data[which(data$price==0),])
top=data%>%
group_by(host_id)%>%
tally()
top
top=top[order(-top$n),]
top=head(top)
top
barplot(top$n, names.arg = top$host_id, xlab = "HOST IDS", ylab="LISTINGS", col="light blue")
levels(data$neighbourhood_group)
p1=data[data$neighbourhood_group=='Brooklyn','price']
p2=data[data$neighbourhood_group=='Manhattan','price']
p3=data[data$neighbourhood_group=='Queens','price']
p4=data[data$neighbourhood_group=='Staten Island','price']
p5=data[data$neighbourhood_group=='Bronx','price']
neigh_1=summary(p1)
neigh_2=summary(p2)
neigh_3=summary(p3)
neigh_4=summary(p4)
neigh_5=summary(p5)
neigh_prices=rbind(neigh_1, neigh_2, neigh_3, neigh_4, neigh_5)
row.names(neigh_prices)<-c('Brooklyn', 'Manhattan', 'Queens', 'Staten Island', 'Bronx')
neigh_prices
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
formattable(d, list(
availability_365=color_tile("white", "red"),
))
formattable(d, list(
availability_365=color_tile("white", "red"),
minimum_nights=color_tile("white", "blue"),
price=color_tile("white", "pink")
))
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
ggplot(data, aes(x=room_type))+geom_bar(fill=c("blue", "red", "green"))
formattable(d, list(
availability_365=color_tile("white", "red")
))
room_price=data%>%
group_by(room_type)%>%
summarise(avg_price=mean(price))
room_price
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity")
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("blue", "red", "yellow"))+geom_text(label=avg_price)
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("blue", "red", "yellow"))+geom_text(label=room_price$avg_price)
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)
room_price=data%>%
group_by(room_type)%>%
summarise(avg_price=round(mean(price),2))
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)+theme_dark()
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)+theme_minimal()
ggplot(room_price, aes(x=room_type, y=avg_price))+geom_bar(stat="identity", fill=c("green", "red", "yellow"))+geom_text(label=room_price$avg_price)+theme_minimal()+xlab("Room Type")+ylab("Average Price")
plot(data$price, data$availability_365)
d=data%>%
filter(price>1000)
plot(d$price, d$availability_365)
d=data%>%
filter(price>1000 & availability_365!=0)
plot(d$price, d$availability_365)
ggplot(d, aes(x=price, y=availability_365, col=room_type))+geom_point()
ggplot(d, aes(x=price, y=availability_365, col=room_type))+geom_point()+xlabs("Price")+ylabs("Availability in 365 days")
ggplot(d, aes(x=price, y=availability_365, col=room_type))+geom_point()+xlab("Price")+ylab("Availability in 365 days")
d=data%>%
group_by(room_type)%>%
filter(availability_365!=0)%>%
select(room_type, availability_365)
d=head(d,100)
formattable(d, list(
availability_365=color_tile("white", "red")
))
d=head(d,50)
library(tidyverse)
library(tidyverse)
library(caret)
library(tidyverse)
library(caret)
data=read.csv("heart.csv")
colnames(data)[1]="age"
colnames(data)
#Converting the required columns to factors
str(data)
#Converting the required columns to factors
str(data)
data=data%>%
mutate(sex=replace(sex, sex==1, "Male"))
data=data%>%
mutate(sex=replace(sex, sex==1, "Male"))
data=data%>%
mutate(sex=replace(sex, sex==0, "Female"))
data=data%>%
mutate(target=replace(target, target==1, "Yes"))
data=data%>%
mutate(target=replace(target, target==0, "No"))
data$sex=as.factor(data$sex)
data$target=as.factor(data$target)
data$slope=as.character(data$slope)
data$slope=as.factor(data$slope)
str(data)
data=read.csv("Real_Estate.csv")
rm(list=ls())
library(tidyverse)
library(caret)
data=read.csv("Real_Estate.csv")
library(MASS)
data("marketing")
library(datarium)
data("marketing")
View(data)
View(data)
force(marketing)
View(marketing)
View(marketing)
library(ggplot2)
data=read.csv("Real_Estate.csv")
ggplot(data, aes(x=number.of.convenience.stores ,y=Price))+geom_point()
ggplot(data, aes(x=house.age ,y=Price))+geom_point()
ggplot(data, aes(x=house.age ,y=Price))+geom_point()+geom_smooth()
ggplot(data, aes(x=house.age ,y=Price))+geom_point()+geom_smooth(method="lm")
ggplot(data, aes(x=house.age ,y=Price))+geom_point()+geom_smooth(method="lm", se=FALSE)
cor(data$house.age, data$Price)
model=lm(price~house.age, data = data)
model=lm(Price~house.age, data = data)
model
summary(model)
confint(model)
sigma(model)*100/mean(data$Price)
data("marketing")
str(marketing)
head(marketing)
#building a linear model
model <- lm(sales~youtube,data=marketing)
model
#RSE
sigma(model)*100/mean(marketing$sales)
#loading Boston housing data in MASS for predicting median house value
data('Boston')
force(Boston)
View(Boston)
View(Boston)
train_sample=data$Price%>%
createDataPartition(p=0.8,list=FALSE)
train <- Boston[train_samples,]
test <- Boston[-train_samples,]
train <- data[train_samples,]
train_samples=data$Price%>%
createDataPartition(p=0.8,list=FALSE)
train <- data[train_samples,]
test <- data[-train_samples,]
model=lm(Price~., data=data)
pred <- model %>%
predict(test)
RMSE <- RMSE(pred,test$Price)
RMSE
R2 <- R2(pred,test$Price)
R2
library(tidyverse)
library(caret)
library(MASS)
#loading Boston housing data in MASS for predicting median house value
data('Boston')
str(Boston)
train_samples <- Boston$medv %>%
createDataPartition(p=0.8,list=FALSE)
#head(train_samples)
train <- Boston[train_samples,]
test <- Boston[-train_samples,]
#Building a regression model
model <- lm(medv~.,data=train)
#Make predictions
pred <- model %>%
predict(test)
#Detecting multicollinearity
library(car)
vif(model)
library(datarium)
data("marketing")
#building a linear model
model <- lm(sales~youtube,data=marketing)
#model summary
summary(model)
#confidence interval
confint(model)
mydat <- PlantGrowth
rm(list=ls())
mydat <- PlantGrowth
set.seed(123)
sample_n(mydat,10)
sample_n(mydat,10)
#visualize the data
library(ggplot2)
library(ggpubr)
#compute analysis of variance
res <- aov(weight~group,data=mydat)
#checking homogeneity of variance
plot(res,1)
plot(res)
plot(res)
rm(list=ls())
rm(list=ls())
library(tidyverse)
library(tidyverse)
library(caret)
library(ggplot2)
data=read.csv("Real_Estate.csv")
ggplot(data, aes(x=house.age ,y=Price))+geom_point()
ggplot(data, aes(x=house.age ,y=Price))+geom_point()+geom_smooth()
ggplot(data, aes(x=house.age ,y=Price))+geom_point()+geom_smooth(method="lm", se=FALSE)
model=lm(Price~house.age, data = data)
model1=lm(Price~house.age, data = data)
model1
confint(model)
sigma(model)*100/mean(data$Price)
View(data)
View(data)
cor(data[2:])
cor(data[,2:])
cor(data)
cor(data[,-data$No])
cor(data[,-data$No])
cor(data[,])
cor(data[,2:8])
model2=lm(Price~.-No,data)
model2
summary(model2)
confint(model2)
sigma(model2)*100/mean(data$Price)
train <- data[train_samples,]
set.seed(123)
train_samples=data$Price%>%
createDataPartition(p=0.8,list=FALSE)
train <- data[train_samples,]
test <- data[-train_samples,]
model=lm(Price~., data=data)
pred <- model %>%
predict(test)
model=lm(Price~., data=data)
pred <- model %>%
predict(test)
RMSE <- RMSE(pred,test$Price)
RMSE
R2 <- R2(pred,test$Price)
R2
model2=lm(Price~distance.to.the.nearest.MST.station,data)
model2=lm(Price~distance.to.the.nearest.MRT.station,data)
model2
summary(model2)
sigma(model2)*100/mean(data$Price)
cor(data$Price, data$distance.to.the.nearest.MRT.station)
model2=lm(Price~distance.to.the.nearest.MRT.station,data)
model2
summary(model2)
vif(model)
library(car)
vif(model)
plot(model)
plot(model)
h
7+8
rm(list=ls())
data=read.csv("elementary_2015_16.csv")
library(dplyr)
library(ggplot2)
summary(data)
rm(list=ls())
data=read.csv("Life_Expectancy_Data.csv")
library(dplyr)
library(ggplot2)
summary(data)
nrow(data)
sum(is.na(data))
View(data)
View(data)
sum(is.na(data$Life.expectancy))
cor(data[4:])
cor(data[,4:])
cor(data[,4:22])
head(data)
data=data%>%
drop_na()%>%
filter(!is.na(Life.expectancy), !is.na(Adult.Mortality), !is.na(infant.deaths))
library(tidyverse)
data=data%>%
drop_na()%>%
filter(!is.na(Life.expectancy), !is.na(Adult.Mortality), !is.na(infant.deaths))
sum(is.na(data))
sum(is.na(data))
data%>%
group_by(Status)%>%
summarize(count=n(), avg_life_exp=mean(Life.expectancy, na.rm=TRUE),avg_inf_mort=mean(infant.deaths, na.rm = TRUE), avg_adul_mort=mean(Adult.Mortality, na.rm = TRUE))
data%>%
group_by(Status)%>%
summarize(count=n(), avg_life_exp=mean(Life.expectancy, na.rm=TRUE),avg_inf_mort=mean(infant.deaths), avg_adul_mort=mean(Adult.Mortality, na.rm = TRUE))
data%>%
group_by(Status)%>%
summarize(count=n(), avg_life_exp=mean(Life.expectancy, na.rm=TRUE),avg_inf_mort=mean(infant.deaths), avg_adul_mort=mean(Adult.Mortality))
data%>%
group_by(Status)%>%
summarize(count=n(), avg_life_exp=mean(Life.expectancy),avg_inf_mort=mean(infant.deaths), avg_adul_mort=mean(Adult.Mortality))
setwd("C:/Code/RStudio/Project")
library(dplyr)
library(ggplot2)
library(reactable)
library(formattable)
library(leaps)
library(caret)
library(tidyverse)
library(lattice)
library(e1071)
library(caTools)
data=read.csv("AB_NYC_2019.csv", stringsAsFactors = TRUE)
data=read.csv("AB_NYC_2019.csv")
df <- data %>% select(price, # place target variable first
#id,
#name,
#host_id,
#host_name,
neighbourhood_group,
#neighbourhood,
latitude,
longitude,
room_type,
minimum_nights,
number_of_reviews,
#last_review,
reviews_per_month,
calculated_host_listings_count,
availability_365)
df$reviews_per_month[is.na(df$reviews_per_month)] <- 0
columns <- c("neighbourhood_group","room_type")
df[, columns] <- df %>% select(all_of(columns)) %>% lapply(as.factor)
df%>%glimpse()
skewness(df$price) # > 1 = highly skewed towards the right
# data with outliers removed
a <- df %>% filter(price < 1000)
skewness(a$price) # > 1 but much less skewed than before
Q <- quantile(df$price, probs=c(.25, .75), na.rm = T)
iqr <- IQR(df$price, na.rm = T)
df2 <- df %>% filter(price > (Q[1] - 1.5*iqr) &
price < (Q[2] + 1.5*iqr))
par(mfrow=c(1,2))
qqnorm(df$price);qqline(df$price)
qqnorm(df$price);qqline(df$price)
qqnorm(a$price); qqline(a$price)
par(mfrow=c(1,2))
qqnorm(df$price);qqline(df$price)
qqnorm(a$price); qqline(a$price)
par(mfrow=c(2,1))
options(repr.plot.width=12, repr.plot.height=6)
boxplot(df$price, col = "grey40", horizontal = T,
main = "Price - Before Removing Outliers")
boxplot(df2$price, col = "palegreen3", horizontal = T,
main = "Price - After Removing Outliers")
aov.ng <- aov(price ~ neighbourhood_group, data = df2)
summary(aov.ng)
aov.rt <- aov(price ~ room_type, data = df2)
summary(aov.rt)
TukeyHSD(aov.ng, which = "neighbourhood_group")
TukeyHSD(aov.rt, which = "room_type")
c1 <- df2
cols = c("neighbourhood_group", "room_type")
c1[,cols] <- c1 %>% select_if(is.factor) %>% lapply(as.numeric)
m <- subset(c1, select = -c(price))
mc <- cor(m)
# Checking Variables that are highly correlated
highlyCorrelated = findCorrelation(mc, cutoff=0.7)
highlyCorCol = colnames(m)[highlyCorrelated]
highlyCorCol
mc
fit1 <- lm(price ~., data = c1)
vif(fit1)
library(car)
vif(fit1)
set.seed(123)
split = sample.split(df2$price, SplitRatio = 0.75)
training_set = subset(df2, split == TRUE)
test_set = subset(df2, split == FALSE)
m1 <- training_set %>% select(price, # place target variable first
neighbourhood_group,
latitude,
longitude,
room_type,
#minimum_nights,
number_of_reviews,
#reviews_per_month,
calculated_host_listings_count,
availability_365
) %>% lm()
summary(m1)
n = ncol(training_set)
fit <- regsubsets(price ~ ., data = training_set, nvmax = n)
sfit <- summary(fit)
# best model has the largest adjutsed R-Squred
which.max(sfit$adjr2)
coef(fit, which.max(sfit$adjr2))
m2 <- lm(price ~
neighbourhood_group +
latitude +
longitude +
room_type +
minimum_nights +
availability_365,
data = training_set)
summary(m2)
m3 <- lm(price ~
#neighbourhood_group +
#latitude +
#longitude +
room_type +
minimum_nights +
availability_365 +
#neighbourhood_group * longitude +
neighbourhood_group * latitude +
#neighbourhood_group * number_of_reviews +
#neighbourhood_group * availability_365 +
room_type * longitude+
room_type * latitude,
#room_type * number_of_reviews,
#room_type * availability_365,
data = training_set)
summary(m3)
m3 <- lm(price ~
room_type +
minimum_nights +
availability_365 +
neighbourhood_group * latitude +
room_type * longitude,
data = training_set)
summary(m3)
cat("#####   Model Comparison   #####\n");
cat("\nModel 1 R-Squared = ", round(as.numeric(summary(m1)[9]),4))
cat("\nModel 2 R-Squared = ", round(as.numeric(summary(m2)[9]),4))
cat("\nModel 3 R-Squared = ", round(as.numeric(summary(m3)[9]),4))
print("#####   Model Comparison   #####\n");
print("#####   Model Comparison   #####\n");
cat("\nModel 1 R-Squared = ", round(as.numeric(summary(m1)[9]),4))
cat("\nModel 2 R-Squared = ", round(as.numeric(summary(m2)[9]),4))
cat("\nModel 3 R-Squared = ", round(as.numeric(summary(m3)[9]),4))
library(rpart)
m4 = rpart(formula = price ~ .,
data = training_set,
method = "anova")
#Complexity Table
printcp(m4)
caret::varImp(m4)
prp(m4, main = "Model 4")
