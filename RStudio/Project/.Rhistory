y=c(2, FALSE)
class(y)
a=c(1,3,7,2,8)
a[[a>5]]
a[a>5]
x <- list(1, "a", TRUE, 1 + 4i)
x
x[1]
x[[1]]
x<-7
class(x)
x<-list(1, “a”,”5”, FALSE)
x<-list(1, "a","5", FALSE)
x[3]
x[[3]]
x<-c(“a”, “b”,”c”)
x<-c("a", "b","c")
as.numeric(x)
x<- c(10,NA, 25, NAN, 36)
is.na(x)
x<-list(1, “a”,”5”, FALSE)
x<-list(1, "a","5", FALSE)
x[3]
x[[3]]
x<-c(2,3,4)
y<-c(10,20,30)
rbind(x,y)
dim(rbind(x,y))
x <- list(tttxxxttt="hai")
x["t",exact=FALSE]
x[["t",exact=FALSE]]
x<-7
class(x)
x<-c("2", 6.5,9L)
class(x)
x<-list(empid=50001, name="Raja" , doj="12-04-2015", dept="production")
x$dept
x["dept"]
x[4]
x[[4]]
x[["dept"]]
x<-matrix(1:10, 2,5)
x[1,]
x[1,3]
x<- c(10,NA, 25, NAN, 36)
is.na(x)
x<- c(10,NA, 25, NA, 36)
is.na(x)
x <- list(tttxxxttt="hai")
x[["t",exact=FALSE]]
x<-list(1, "a","5", FALSE)
x[3]
x[[3]]
x<-matrix(1:10, 2,5)
x[1,3]
x[3,1]
x<-c("a", "b","c")
as.numeric(x)
x<-7
class(x)
x<-c("2", 6.5,9L)
class(x)
x<-list(empid=50001, name="Raja" , doj="12-04-2015", dept="production")
x$dept
x["dept"]
x[4]
x[[4]]
x[["dept"]]
x<-c(2,3,4)
y<-c(10,20,30)
dim(rbind(x,y))
class(rbind(x,y))
typeof(rbind(x,y))
data(whiteside)
library(MASS)
data(whiteside)
force(whiteside)
View(whiteside)
View(whiteside)
View(whiteside)
data(survery)
data(survey)
force(survey)
## Setup
rm(list=ls())
### Load packages if any using library(packagename)
library(MASS)
### Load data
```{r}
#data(iris) A sample is shown here
```
df=data(survey)
### Load data
```{r}
#data(iris) A sample is shown here
```
df=data(survey)
### Load data
```{r}
#data(iris) A sample is shown here
```
df=na.omit(survey)
### Load data
df=na.omit(survey)
## Setup
rm(list=ls())
### Load packages if any using library(packagename)
library(MASS)
### Load data
df=na.omit(survey)
str(df)
head(df)
```{r}
---
title: "LabEx2-Data frame Basics & Indexing"
output:
html_document:
fig_height: 4
highlight: pygments
theme: spacelab
---
### Reg. No: <your reg.no.here>
18BCE1010
df=na.omit(survey)
```{r}
df=na.omit(survey)
```{r}
rm(list=ls())
df=na.omit(survey)
str(df)
class(df)
typeof(df)
nrow(df)
ncol(df)
dim(df)
summary(df)
head(df)
str(df)
class(df)
typeof(df)
nrow(df)
ncol(df)
dim(df)
summary(df)
colnames(df)
head(df)
View(df)
View(df)
#Calculating the avg of all rows for Wr.Hnd Span
mean(df[,2])
#Calculating the avg of all rows for Wr.Hnd Span and NW.Hnd
mean(df[,2:3])
#Calculating the avg of all rows for Wr.Hnd Span and NW.Hnd
rowMeans(df[,2:3])
#Calculating the avg of all rows for Wr.Hnd Span and NW.Hnd
colMeans(df[,2:3])
#Finding the max of Wr. Hnd Span and NW.Hnd
max(df[,2:3])
#Finding the max of Wr. Hnd Span and NW.Hnd
max(df[,2])
max(df[,3])
#Finding the max of Wr. Hnd Span and NW.Hnd
max(df[,2])
max(df[,3])
#Finding the max of Wr. Hnd Span
max(df[,2])
#Finding the max of NW. Hnd Span
max(df[,3])
max(df[,2])
min(df[,2])
min(df[,2])
max(df[,2])
min(df[,3])
max(df[,3])
#Finding the min and max of NW. Hnd Span
min(df[,3])
#Finding the min and max of NW. Hnd Span
min(df[,3])
max(df[,3])
min(df[,3])
max(df[,3])
#Finding the average pulse rate of students
colMeans(df[,5])
#Finding the average pulse rate of students
colMeans(df[,6])
#Finding the average pulse rate of students
colMeans(df[6])
## Part 2: Selected Questions and Corresponding Code & Output
```{r}an
#Calculating the avg of all rows for Wr.Hnd Span and NW.Hnd
colMeans(df[,2:3])
```
```{r}
#Finding the min and max of Wr. Hnd Span
min(df[,2])
max(df[,2])
```
#Calculating the avg of all rows for Wr.Hnd Span and NW.Hnd
colMeans(df[,2:3])
#Display the Student row with highest pulse rate
df[which.max(df$Pulse),]
#Display the Student row with highest pulse rate
df[which.max(df$Pulse),]
#Display all Student rows with pulse rate higher than the average
df[which(df$Pulse>mean(df$Pulse)),]
#Display all Student rows with pulse rate higher than the average
mean(df$Pulse)
df[which(df$Pulse>mean(df$Pulse)),]
mean(df$Pulse)
df[which(df$Pulse>mean(df$Pulse)),]
#Display all student rows with height above 170cm and pulse above 80
df[which(df$Height>170 && df$Pulse>80),]
#Display all student rows with height above 170cm and pulse above 70
df[which(df$Height>170 && df$Pulse>70),]
#Display all student rows with height above 170cm and pulse above 70
df[which((df$Height>170) & (df$Pulse>70)),]
count(df$Sex)
length(unique(df$Sex))
unique(df$Sex)
#Display categories in M.I column
unique(df$M.I)
#Finding the average of Wr.Hnd span and NW.Hnd span
rowMeans(df[,2:3])
#Finding the average of Wr.Hnd span and NW.Hnd span
avg=rowMeans(df[,2:3])
avg
#Finding the average of Wr.Hnd span and NW.Hnd span
avg=c(rowMeans(df[,2:3]))
avg
#Adding the avg column to the dataset
cbind(df,avg)
#Display categories in Smoke column
unique(df$Smoke)
mode(df$Sex)
max(df$Sex)
View(df)
View(df)
#Display Pulse rate and height of Students above 20 years old
df[which(df$Age>20), c(6,10)]
#Display Pulse rate and height of Students above 20 years old
df[which(df$Age>20), c(6,10,12)]
rm(list=ls())
df=na.omit(survey)
library(MASS)
df=na.omit(survey)
avg=c(rowMeans(df[,2:3]))
avg
#10. Adding the avg column to the dataset
cbind(df,avg)
#12. Display Wr.Hnd Span of Right handed Students
df[which(df$W.Hnd=="Right"), 2]
#13. Display the average of Wr.Hnd Span of all Left handed Students
mean(df[which(df$W.Hnd=="Left"), 2])
rm(list=ls())
rm(list=ls())
### Load packages if any using library(packagename)
```{r}
library(MASS)
```
library(MASS)
df=na.omit(survey)
View(df)
df
str(df)
class(df)
typeof(df)
nrow(df)
ncol(df)
dim(df)
summary(df)
colnames(df)
head(df)
#1. Calculating the avg of all rows for Wr.Hnd Span and NW.Hnd
colMeans(df[,2:3])
min(df[,2])
max(df[,2])
min(df[,3])
max(df[,3])
#4. Finding the average pulse rate of students
colMeans(df[6])
#5. Display the Student row with highest pulse rate
df[which.max(df$Pulse),]
df[which(df$Pulse>mean(df$Pulse)),]
#7. Display all student rows with height above 170cm and pulse above 70
df[which((df$Height>170) & (df$Pulse>70)),]
#8. Display categories in Smoke column
unique(df$Smoke)
#9. Finding the average of Wr.Hnd span and NW.Hnd span
avg=c(rowMeans(df[,2:3]))
avg
#10. Adding the avg column to the dataset
cbind(df,avg)
#11. Display Pulse rate and height of Students above 20 years old
df[which(df$Age>20), c(6,10,12)]
#12. Display Wr.Hnd Span of Right handed Students
df[which(df$W.Hnd=="Right"), 2]
#13. Display the average of Wr.Hnd Span of all Left handed Students
mean(df[which(df$W.Hnd=="Left"), 2])
rm(list=ls())
install.packages("rmarkdown")
unlink('C:/Code/RStudio/Lab2/Lab2c_18BCE1010_cache', recursive = TRUE)
install.packages
install.packages("tinytex")
install.packages("rmarkdown", dependencies = TRUE)
install.packages(c("pkgconfig", "sys", "tidyr", "tidyselect"))
install.packages(c("pkgconfig", "sys", "tidyr", "tidyselect"))
install.packages("dplyr")
install.Rtools()
rm(list=ls())
library(MASS)
library(dplyr)
newsurvey=na.omit(survey)
View(newsurvey)
View(newsurvey)
#2
filter(newsurvey, Sex="Male", W.Hnd="Left")
#2
filter(newsurvey, Sex=="Male", W.Hnd=="Left")
#3
filter(newsurvey, Sex=="Female", Clap=="Right")
#4
dplyr::select(newsurvey,Sex, Age, W.Hnd)
#4
filter(Exer=="Never")
#4
filter(newsurvey, Exer=="Never")
#4
filter(newsurvey, Exer=="None")
select(Age, Pulse, Wr.Hnd)
newsurvey%>%
filter(W.Hnd=="Left", Sex=="Female")
dplyr::select(Age, Pulse, Wr.Hnd)
newsurvey%>%
filter(W.Hnd=="Left", Sex=="Female")%>%
dplyr::select(Age, Pulse, Wr.Hnd)
#7
arrange(newsurvey, desc(Height))
#7
arrange(newsurvey, desc(Height))%>%filter(Sex=="Male", W.Hnd=="Left")
#8
mutate(newsurvey, diff=Wr.Hnd-NW.Hnd)
newsurvey=na.omit(survey)
mutate(newsurvey, Diff=Wr.Hnd-NW.Hnd)%>%
dplyr::select(Sex,Wr.Hnd, NW.Hnd, Diff)
#9
newsurvey%>%
filter(W.Hnd=="Left")%>%
dplyr::select(Wr.Hnd)%>%
summarise()
#9
newsurvey%>%
filter(W.Hnd=="Left")%>%
summarise(mean(Wr.Hnd))
#9
newsurvey%>%
filter(W.Hnd=="Left", Sex=="Male")%>%
summarise(mean(Wr.Hnd))
newsurvey%>%
filter(W.Hnd=="Left", Sex=="Female")%>%
summarise(mean(Wr.Hnd))
#10
newsurvey%>%
filter(Sex=="Male", W.Hnd=="Left")%>%
summarise(max(Pulse))
newsurvey%>%
filter(Sex=="Male", W.Hnd=="Right")%>%
summarise(max(Pulse))
rm(list=ls())
#1
library(MASS)
library(dplyr)
newsurvey=na.omit(survey)
#2
filter(newsurvey, Sex=="Male", W.Hnd=="Left")
#3
filter(newsurvey, Sex=="Female", Clap=="Right")
#4
filter(newsurvey, Exer=="None")
#4
filter(newsurvey, Exer=="None")
load("C:/Code/RStudio/Quiz/nycflights.RData")
install.packages("xlsx")
install.packages("xlsx")
install.packages("XML")
install.packages("xml2")
install.packages("XML", repos = "http://www.omegahat.net/R")
install.packages("httr")
install.packages("XML", repos = "http://www.omegahat.net/R")
library(XML)
install.packages("JSON")
install.packages("jsonlite")
View(nycflights)
View(nycflights)
data=nycflights
data%>%
filter(dest=="SFO",month==2)%>%
select(flight
exit
data%>%
filter(dest=="SFO",month==2)%>%
select(flight)
library(dplyr)
data%>%
filter(dest=="SFO",month==2)%>%
dplyr::select(flight)
class(data$month)
data%>%
filter(year==2013)%>%
summarise(max(dep_delay))
data[which(which.max(data$dep_delay) & data$year=="2013")]
data[,which(which.max(data$dep_delay) & data$year=="2013")]
data%>%
filter(year==2013)%>%
summarise(max(dep_delay))
data%>%
filter(year==2013)%>%
summarise(max(dep_delay))%>%
dplyr::select(carrier)
data%>%
filter(year==2013, dep_delay==max(dep_delay))%>%
dplyr::select(carrier)
data[,which.max(data$distance)]
data%>%
filter(dist==max(dist))%>%
dplyr::select(flight)
data%>%
filter(dist==max(dist))
data[which.max(data$distance),10]
rm(list=ls())
library(dplyr)
library(dplyr)
#data(iris) A sample is shown here
data=read.csv("AB_NYC_2019.csv")
head(data)
tail(data)
colnames(data)
ncol(data)
nrow(data)
summary(data)
str(data)
View(data)
View(data)
data()
data(UScitiesD)
force(UScitiesD)
data("CO2")
force(CO2)
data("quakes")
force(quakes)
library(MASS)
library(dplyr)
data=quakes
head(data)
summary(data)
str(data)
colnames(data)
ncol(data)
nrow(data)
View(quakes)
View(quakes)
#1. Displaying the latitude and longitudes of the area with depth above 400
data%>%
filter(depth>400)%>%
dplyr::select(lat, long)
#1. Displaying the latitude and longitudes of the area with depth above 400
data%>%
filter(depth>400)%>%
dplyr::select(lat, long, depth)
#2. Display the number of stations where maximum magnitude of earthquake occurred.
data%>%
filter(mag=max(max))%>%
select(stations, mag)
#2. Display the number of stations where maximum magnitude of earthquake occurred.
data%>%
filter(mag==max(max))%>%
select(stations, mag)
#2. Display the number of stations where maximum magnitude of earthquake occurred.
data%>%
filter(mag==max(mag))%>%
select(stations, mag)
#2. Display the number of stations where maximum magnitude of earthquake occurred.
data%>%
filter(mag==max(mag))%>%
dplyr::select(stations, mag)
data%>%
filter(long<150)%<%
dplyr::select(stations, longitude)
data%>%
filter(long<150)%<%
dplyr::select(stations, long)
data%>%
filter(long<150)%>%
dplyr::select(stations, long)
data%>%
filter(long<1600)%>%
dplyr::select(stations, long)
data%>%
filter(long<170)%>%
dplyr::select(stations, long)
setwd("C:/Code/RStudio/Project")
rm(list=ls())
library(dplyr)
#data(iris) A sample is shown here
data=read.csv("AB_NYC_2019.csv")
head(data)
colnames(data)
ncol(data)
ncol(data)
nrow(data)
class(data)
typeof(data)
dim(data)
